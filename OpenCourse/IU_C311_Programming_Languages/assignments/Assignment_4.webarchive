bplist00“_WebMainResource_WebSubresources’	
_WebResourceTextEncodingName_WebResourceFrameName^WebResourceURL_WebResourceData_WebResourceMIMETypeUUTF-8P_;https://cgi.soic.indiana.edu/~c311/doku.php?id=assignment-4O∫û<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>
  <meta name="google-site-verification" content="CHpL8-yKEGFx7Gy37uNcU2lz9oRZydQdifkiJNj6-P4">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>
    C311/B521/A596 Programming Languages    [Assignment 4: Dynamic Scope]
  </title>

  <meta name="generator" content="DokuWiki Release 2009-02-14b">
<meta name="robots" content="index,follow">
<meta name="date" content="2015-09-19T13:24:17-0400">
<meta name="keywords" content="assignment-4">
<link rel="search" type="application/opensearchdescription+xml" href="/~c311/lib/exe/opensearch.php" title="C311/B521/A596 Programming Languages">
<link rel="start" href="/~c311/">
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/~c311/feed.php">
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="/~c311/feed.php?mode=list&amp;ns=">
<link rel="alternate" type="text/html" title="Plain HTML" href="/~c311/doku.php?do=export_xhtml&amp;id=assignment-4">
<link rel="stylesheet" media="all" type="text/css" href="/~c311/lib/exe/css.php?s=all&amp;t=doogiestpl">
<link rel="stylesheet" media="screen" type="text/css" href="/~c311/lib/exe/css.php?t=doogiestpl">
<link rel="stylesheet" media="print" type="text/css" href="/~c311/lib/exe/css.php?s=print&amp;t=doogiestpl">
<script type="text/javascript" charset="utf-8" src="/~c311/lib/exe/js.php?edit=0&amp;write=0"></script>

  <link rel="shortcut icon" href="/~c311/lib/tpl/doogiestpl/images/favicon.ico">

  </head>



<body>
<div class="dokuwiki">
  
  <div class="stylehead">

    <div class="header">
      <div class="header_left"></div>
      <div class="logo">
        <a href="/~c311/doku.php" name="dokuwiki__top" id="dokuwiki__top" accesskey="h" title="[ALT+H]">C311/B521/A596 Programming Languages</a>      </div>

      <div id="tabnavi" class="tabnavi">
	    <ul>
<li><a href="/~c311/doku.php?id=home">Home</a></li>
<li><a href="/~c311/doku.php?id=course-policies">Policies</a></li>
<li><a href="/~c311/doku.php?id=instructors">Instructors</a></li>
<li><a href="/~c311/doku.php?id=resources">Resources</a></li>
<li><a href="/~c311/doku.php?id=schedule">Schedule</a></li>
<li><a href="/~c311/doku.php?id=assignments">Assignments</a></li>
<li><a href="/~c311/doku.php?id=b621">B621</a></li>
</ul>
	  </div>
	  
	  <div class="clearer"></div>
      	</div>  
  </div>
    
  
   <div style="float: right;">
            <form class="button btn_login" method="get" action="/~c311/doku.php"><div class="no"><input type="hidden" name="do" value="login"><input type="hidden" name="sectok" value="554bccf5fe96b9c55482e5d201ea6d56"><input type="hidden" name="id" value="assignment-4"><input type="submit" value="Login" class="button" title="Login"></div></form>       &nbsp;  &nbsp;  &nbsp;
   </div>
  <div class="clearer">&nbsp;</div>


  <div class="page">
    <!-- ......... wikipage start ......... -->
    


<h1><a name="assignment-4dynamic-scope" id="assignment-4dynamic-scope">Assignment 4: Dynamic Scope</a></h1>
<div class="level1">

<blockquote cite="Charles Babbage, 1864" class="blockquote-plugin">
<p>
On two occasions I have been asked [by members of Parliament],‚Äì‚ÄúPray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?‚Äù [‚Ä¶]

</p>

</blockquote>

</div>

<h2><a name="assignment" id="assignment">Assignment</a></h2>
<div class="level2">

<p>

This assignment has three parts. In addition to an improved <code>lex</code>, we expect you to turn in <strong>three interpreters</strong>: <code>value-of-fn</code>, <code>value-of-ds</code>, and a third, <code>value-of-dynamic</code> with your implementation of dynamic scope. H311/B521 students will have a fourth interpreter. 
</p>

<p>
You should be able to use the <a href="/~c311/lib/exe/fetch.php?media=a4-student-tests.rkt" class="media mediafile mf_rkt" title="a4-student-tests.rkt">a4-student-tests.rkt</a> file to test your solutions.
</p>
<pre class="code lisp"><span class="sy0">&gt;</span> <span class="br0">(</span>require <span class="st0">"a4-student-tests.rkt"</span><span class="br0">)</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>test<span class="sy0">-</span>file #:<span class="me1">file</span><span class="sy0">-</span><span class="kw1">name</span> <span class="st0">"a4.rkt"</span><span class="br0">)</span>
...</pre>
<p>

and that should get you going. Of course, <strong>these tests are not exhaustive; you should add your own tests as well</strong>. 
</p>

</div>

<h3><a name="part-i" id="part-i">Part I</a></h3>
<div class="level3">

<p>

When we implemented <code>lex</code> before, it could handle variables, application, and <code>lambda</code>-abstraction forms. Extend your previous definition of <code>lex</code> so that it can handle not only those forms, but also numbers, <code>zero?</code>, <code>sub1</code>, <code>*</code>, <code>if</code>, and <code>let</code>. This should be a fairly straightforward extension, but it also serves as a chance to improve a misbehaving <code>lex</code> from Assignment 2. In order to better disambiguate numbers from lexical addresses, you should transform a number <code>n</code> into <code>(const n)</code>. 
</p>
<pre class="code lisp"><span class="sy0">&gt;</span> <span class="br0">(</span>lex '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> x<span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span>  '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>const <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>lex '<span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="sy0">!</span><span class="br0">)</span>
  	  <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>n<span class="br0">)</span>
  	    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? n<span class="br0">)</span> <span class="nu0">1</span> <span class="br0">(</span><span class="sy0">*</span> n <span class="br0">(</span><span class="sy0">!</span> <span class="br0">(</span>sub1 n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
	'<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">lambda</span>
  <span class="br0">(</span><span class="kw1">lambda</span>
    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span>
  	<span class="br0">(</span>const <span class="nu0">1</span><span class="br0">)</span>
  	<span class="br0">(</span><span class="sy0">*</span> <span class="br0">(</span>var 0<span class="br0">)</span> <span class="br0">(</span><span class="br0">(</span>var <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>sub1 <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>lex '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span><span class="sy0">!</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="sy0">!</span><span class="br0">)</span>
  		   <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>n<span class="br0">)</span>
  		     <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? n<span class="br0">)</span> <span class="nu0">1</span> <span class="br0">(</span><span class="sy0">*</span> n <span class="br0">(</span><span class="br0">(</span><span class="sy0">!</span> <span class="sy0">!</span><span class="br0">)</span> <span class="br0">(</span>sub1 n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
          <span class="br0">(</span><span class="br0">(</span><span class="sy0">!</span> <span class="sy0">!</span><span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
       '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="kw1">lambda</span>
       <span class="br0">(</span><span class="kw1">lambda</span>
  	 <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span>
  	     <span class="br0">(</span>const <span class="nu0">1</span><span class="br0">)</span>
  	     <span class="br0">(</span><span class="sy0">*</span> <span class="br0">(</span>var 0<span class="br0">)</span> <span class="br0">(</span><span class="br0">(</span><span class="br0">(</span>var <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>var <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>sub1 <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="br0">(</span><span class="br0">(</span>var 0<span class="br0">)</span> <span class="br0">(</span>var 0<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>const <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
</div>

<h3><a name="part-ii" id="part-ii">Part II</a></h3>
<div class="level3">

<p>

For this part of the assignment, use <strong>one</strong> of your interpreters from last week's assignment as a starting point. You may pick either <code>value-of</code>, <code>value-of-fn</code> or <code>value-of-ds</code>. But for Part II you should pick, and stick with, a *single* representation of environments. If you choose to start with <code>value-of</code>, leave your environments representation dependent using higher-order functions. If you chose to start with <code>value-of-fn</code> change either all three of <code>empty-env-fn</code>, <code>apply-env-fn</code>, and <code>extend-env-fn</code> to <code>empty-env</code>, <code>apply-env</code>, and <code>extend-env</code>. If you chose to start with <code>value-of-ds</code> change all three of <code>empty-env-ds</code>, <code>apply-env-ds</code>, and <code>extend-env-ds</code>, to <code>empty-env</code>, <code>apply-env</code>, and <code>extend-env</code>. In either of the latter two cases, use these new names for the environment helpers in your interpreter. Having done so, create two *new* interpreters that are representation independent with respect to closures: <code>value-of-fn</code> and <code>value-of-ds</code>, respectively. 

</p>
<pre class="code">1. ''value-of-fn'' should use a functional representation of closures.
2. ''value-of-ds'' should use a data-structural representation of closures.</pre>

<p>

You should write two new closure helper functions for each of your interpreters. Write <code>apply-closure-fn</code> and <code>closure-fn</code> for <code>value-of-fn</code>, and write <code>apply-closure-ds</code>, and <code>closure-ds</code> for <code>value-of-ds</code>. 
</p>

<p>
Your interpreters must work for at least these test cases. Of course, <strong>these tests are not exhaustive; you should use your own tests as well</strong>. 
</p>
<pre class="code lisp"><span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>fn 
    '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? x<span class="br0">)</span> 
                      <span class="nu0">12</span> 
                      <span class="nu0">47</span><span class="br0">)</span><span class="br0">)</span> 
       0<span class="br0">)</span> 
    <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">12</span>    
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>fn
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>y <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="sy0">*</span> x y<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>sub1 <span class="nu0">6</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">60</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>fn
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>y <span class="br0">(</span>sub1 x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
        <span class="br0">(</span><span class="sy0">*</span> x y<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">30</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>fn
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span>sub1 x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
        <span class="br0">(</span><span class="sy0">*</span> x x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">25</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ds
    '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? x<span class="br0">)</span> 
                      <span class="nu0">12</span> 
                      <span class="nu0">47</span><span class="br0">)</span><span class="br0">)</span> 
       0<span class="br0">)</span> 
    <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">12</span>    
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ds
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>y <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="sy0">*</span> x y<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>sub1 <span class="nu0">6</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">60</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ds
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>y <span class="br0">(</span>sub1 x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
        <span class="br0">(</span><span class="sy0">*</span> x y<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">30</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ds
   '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="br0">(</span>sub1 x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
        <span class="br0">(</span><span class="sy0">*</span> x x<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">25</span></pre>
</div>

<h3><a name="part-iii" id="part-iii">Part III</a></h3>
<div class="level3">

<p>

The second part of this week's assignment is to create an interpreter that uses <em>dynamic scope</em>.
</p>

</div>

<h4><a name="explanation-of-dynamic-scope" id="explanation-of-dynamic-scope">Explanation of dynamic scope</a></h4>
<div class="level4">

<p>

The interpreters we have been writing so far have been implemented in such a way that, if there are variables that occur free in an a procedure, they take their values from the environment in which the <code>lambda</code> expression is defined.  We accomplish this by creating a closure for each procedure we see, and we save the environment in the closure.  This technique is called <em>static binding of variables</em>, or <em>static scope</em>. Lexical scope is a kind of static scope.
</p>

<p>
Alternatively, we could implement our interpreters such that any variables that occur free in the body of a procedure get their values from the environment from which the procedure is <em>called</em>, rather than from the environment in which the procedure is <em>defined</em>.
</p>

<p>
For example, consider what would happen if we were to evaluate the following expression in an interpreter that used lexical scope:
</p>
<pre class="code lisp"><span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>f <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>e<span class="br0">)</span> x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="nu0">5</span><span class="br0">]</span><span class="br0">)</span>
      <span class="br0">(</span>f 0<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
<p>
Our lexical interpreter would add <code>x</code> to the environment with a value of <code>2</code>. For <code>f</code>, it would create a closure that contained the binding of <code>x</code> to <code>2</code>, and it would add <code>f</code> to the environment with that closure as its value.  Finally, the inner <code>let</code> would add <code>x</code> to the environment with a value of <code>5</code>. Then the call <code>(f 0)</code> would be evaluated, but since it would use the value of <code>x</code> that was saved in the closure (which was <code>2</code>) rather than the value of <code>x</code> that was current at the time <code>f</code> was called (which was <code>5</code>), the entire expression would evaluate to <code>2</code>.
</p>

<p>
Under dynamic scope, we wouldn't save the value of <code>x</code> in the closure for <code>f</code>.  Instead, the application <code>(f 0)</code> would use the value of <code>x</code> that was current in the environment at the time it was called, so the entire expression would evaluate to <code>5</code>.
</p>

<p>
As you can see, dynamic scope is a little strange, but it does have its uses.
</p>

<p>

Define <code>value-of-dynamic</code>, an interpreter that implements dynamic scope. You can start with the dynamically-scoped interpreter we wrote in class that used <code>match-let</code>. You should be able to share your environment helpers from Parts I and II above, but you should not implement an abstraction for closures as well. Instead, the value of a <code>lambda</code> abstraction should be that same lambda abstraction. In the same way the value of a number is that same number. You'll find then, that when you go to evaluate an application, there's only one environment in which you <em>can</em> evaluate the body. This is a pretty simple change. To liven things up a little (and also to allow us a more interesting test case), this interpreter should also implement <code>let</code>, <code>if</code>, <code>*</code>, <code>sub1</code>, <code>null?</code>, <code>zero?</code>, <code>cons</code>, <code>car</code>, <code>cdr</code>, and <code>quote</code>. When evaluating the expression <code>(cons 1 (cons 2 '()))</code> <code>value-of-dynamic</code> should return <code>(1 2)</code>. Now <code>quote</code> is a bit of a tricky beast. So here's the <code>quote</code> line for the interpreter. 
</p>
<pre class="code lisp">   <span class="br0">[</span>`<span class="br0">(</span><span class="kw1">quote</span> ,v<span class="br0">)</span> v<span class="br0">]</span></pre>
<p>
<!---
Consider this slightly modified version of the interpreter which uses a higher-order representation for closures. Notice that the &#039;&#039;lambda&#039;&#039; line now returns a procedure that takes two arguments, where the second argument is an environment. This change in the &#039;&#039;lambda&#039;&#039; line also requires a change in the application line: we now have to pass in the environment, since the &#039;&#039;rator&#039;&#039; is a two-argument function.

This interpreter also should be completed to properly work with &#039;&#039;null?&#039;&#039;, &#039;&#039;cons&#039;&#039;, &#039;&#039;car&#039;&#039;, &#039;&#039;cdr&#039;&#039;, and &#039;&#039;quote&#039;&#039;. Note that we match on &#039;&#039;(quote ())&#039;&#039; for the empty list:

&lt;code lisp&gt;
(define value-of-dynamic
  (lambda (exp env)
    (match exp
      [(? number?) exp]
      [(? symbol?) (apply-env env exp)]
      [`(quote ()) &#039;()]
      [`(null? ,ls) _____]
      [`(cons ,a ,d) _____]
      [`(car ,ls) _____]
      [`(cdr ,ls) _____]
      [`(* ,nexp1 ,nexp2) (* (value-of-dynamic nexp1 env) (value-of-dynamic nexp2 env))]
      [`(sub1 ,nexp) (sub1 (value-of-dynamic nexp env))]
      [`(if ,t ,c ,a) (if (value-of-dynamic t env)
                          (value-of-dynamic c env)
                          (value-of-dynamic a env))]
      [`(let ((,x ,e)) ,body) (let ((a (value-of-dynamic e env)))
                                (value-of-dynamic body (extend-env x a env)))]
      [`(lambda (,x) ,body) (lambda (a env^) (value-of-dynamic body (extend-env x a env)))]
      [`(d-lambda (,x) ,body) ______]
      [`(,rator ,rand) ((value-of-dynamic rator env) (value-of-dynamic rand env) env)])))
&lt;/code&gt;

=== Things to do for Part III ===
3. First, copy either your &#039;&#039;value-of-fn&#039;&#039; or &#039;&#039;value-of-ds&#039;&#039; you defined for Part I, rename it to &#039;&#039;value-of-dynamic,&#039;&#039; and using the above interpreter as a guide, add &#039;&#039;d-lambda&#039;&#039; to &#039;&#039;value-of-dynamic.&#039;&#039; **Hint: You will need to add one line to your interpreter to handle &#039;&#039;d-lambda&#039;&#039; expressions, which have almost the same syntax as &#039;&#039;lambda&#039;&#039; expressions, but different semantics.**  We have added the  left side of the &#039;&#039;d-lambda&#039;&#039; line in the example interpreter above.

We name this new interpreter &#039;&#039;value-of-dynamic&#039;&#039; because this new interpreter can handle both lexical (with lambda forms) and dynamic scope (with d-lambda forms). Copy your &#039;&#039;closure&#039;&#039; and &#039;&#039;apply-closure&#039;&#039; helpers for whichever interpreter you copied from above (&#039;&#039;value-of-fn&#039;&#039; or &#039;&#039;value-of-ds&#039;&#039;),  rename them &#039;&#039;closure-scopes&#039;&#039; and &#039;&#039;apply-closure-scopes&#039;&#039;, and modify them as necessary to handle the new &#039;&#039;d-lambda&#039;&#039; form. Modify the interpreter to use these helpers. 

-->
</p>
<pre class="code lisp"><span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>dynamic '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span>
                       <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>f <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>e<span class="br0">)</span> x<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
                         <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>x <span class="nu0">5</span><span class="br0">]</span><span class="br0">)</span>
                           <span class="br0">(</span>f 0<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
                    <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">5</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>dynamic
    '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span><span class="sy0">!</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>n<span class="br0">)</span>
                <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zero? n<span class="br0">)</span> 
                    <span class="nu0">1</span>
                    <span class="br0">(</span><span class="sy0">*</span> n <span class="br0">(</span><span class="sy0">!</span> <span class="br0">(</span>sub1 n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
       <span class="br0">(</span><span class="sy0">!</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="nu0">120</span>
<span class="sy0">&gt;</span> <span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>dynamic
    '<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>f <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> x <span class="kw1">l</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
       <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">[</span>cmap 
	      <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>f<span class="br0">)</span>
		<span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="kw1">l</span><span class="br0">)</span>               
		  <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">null</span>? <span class="kw1">l</span><span class="br0">)</span> 
		      '<span class="br0">(</span><span class="br0">)</span>
		      <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>f <span class="br0">(</span><span class="kw1">car</span> <span class="kw1">l</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="br0">(</span>cmap f<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cdr</span> <span class="kw1">l</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
	 <span class="br0">(</span><span class="br0">(</span>cmap f<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="nu0">1</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="nu0">2</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="nu0">3</span> '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> 
    <span class="br0">(</span>empty<span class="sy0">-</span>env<span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">2</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">3</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span></pre>
</div>

<h2><a name="brainteasers" id="brainteasers">Brainteasers</a></h2>
<div class="level2">

<p>
<!---
==== Brainteaser 1 ====

Dynamic scope is often viewed as a mistake in programming language implementation, and almost all modern languages use lexical scope instead. However, there are some situations where dynamic scope can be carefully applied to make solving a problem more straightforward.

Describe such a problem, explaining why solving your example with a mix of dynamic and lexical scope is easier than with lexical scope alone. Your example need not be limited to Scheme programs.
--->
</p>

<p>
4. We've been talking a whole lot about representation independence. It would sure be nice to have a single interpreter where we could just pass in the various helper functions. That way we could write the interpreter once, pass in implementations of our environment and closure helpers, and then get an interpreter that will just take the expression we want to evaluate, that uses those helpers. From such a definition, it is obvious on first inspection of this single interpreter is indeed representation independent with respect to both environments and closures. 
</p>

<p>

So let's do it. 
</p>

<p>

Write a single function named <code>value-of-ri</code> that'll take <code>empty-env</code>, <code>extend-env</code>, <code>apply-env</code>, <code>closure</code>, and <code>apply-closure</code>, and return an interpreter expecting a single expression. You'll need to pass an additional parameter to your closure helper functions, so define them as <code>closure-fn-ri</code> and <code>apply-closure-fn-ri</code> <code>closure-ds-ri</code> and <code>apply-closure-ds-ri</code>, and make sure they take this additional parameter. Go ahead and include your regular <code>if</code>, <code>*</code>, <code>sub1</code>, <code>zero?</code>, <code>let</code>, forms, along with numbers and booleans, and <code>lambda</code>-calculus expressions. <strong>You should not pass your helper functions to recursive calls.</strong> Here's what the calls to initially kick off the interpreter should look like. 
</p>
<pre class="code lisp"><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ri empty<span class="sy0">-</span>env<span class="sy0">-</span>fn extend<span class="sy0">-</span>env<span class="sy0">-</span>fn apply<span class="sy0">-</span>env<span class="sy0">-</span>fn closure<span class="sy0">-</span>fn<span class="sy0">-</span>ri apply<span class="sy0">-</span>closure<span class="sy0">-</span>fn<span class="sy0">-</span>ri<span class="br0">)</span> '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> x<span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
<span class="nu0">5</span>
<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ri empty<span class="sy0">-</span>env<span class="sy0">-</span>ds extend<span class="sy0">-</span>env<span class="sy0">-</span>ds apply<span class="sy0">-</span>env<span class="sy0">-</span>ds closure<span class="sy0">-</span>ds<span class="sy0">-</span>ri apply<span class="sy0">-</span>closure<span class="sy0">-</span>ds<span class="sy0">-</span>ri<span class="br0">)</span> '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> x<span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
<span class="nu0">5</span>
<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ri empty<span class="sy0">-</span>env<span class="sy0">-</span>fn extend<span class="sy0">-</span>env<span class="sy0">-</span>fn apply<span class="sy0">-</span>env<span class="sy0">-</span>fn closure<span class="sy0">-</span>ds<span class="sy0">-</span>ri apply<span class="sy0">-</span>closure<span class="sy0">-</span>ds<span class="sy0">-</span>ri<span class="br0">)</span> '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> x<span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
<span class="nu0">5</span>
<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">(</span>value<span class="sy0">-</span>of<span class="sy0">-</span>ri empty<span class="sy0">-</span>env<span class="sy0">-</span>ds extend<span class="sy0">-</span>env<span class="sy0">-</span>ds apply<span class="sy0">-</span>env<span class="sy0">-</span>ds closure<span class="sy0">-</span>fn<span class="sy0">-</span>ri apply<span class="sy0">-</span>closure<span class="sy0">-</span>fn<span class="sy0">-</span>ri<span class="br0">)</span> '<span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>x<span class="br0">)</span> x<span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>
<span class="nu0">5</span></pre>
<p>
Your solution should involve a letrec.
<!----
==== Just Dessert ====

5. When we apply &#039;&#039;value-of&#039;&#039; (or one of its variants) to an expression, such as the following, we get back a value, an error occurs, or it goes into an infinite loop. 

&lt;code lisp&gt;
(value-of &#039;((lambda (x) x) (lambda (y) y)) (empty-env))
&lt;/code&gt;

We don&#039;t usually get back something that looks like part of the original program. In our version of &#039;&#039;value-of&#039;&#039; this returns some representation of a procedure, depending on how we implement &#039;&#039;closure&#039;&#039; and &#039;&#039;apply-closure&#039;&#039;.

If we think of the language interpreted by &#039;&#039;value-of&#039;&#039; as a set of symbolic terms, though, we don&#039;t concern ourselves representations of procedures or environments. Instead, we just rewrite one term to another term according to some rules. For example:

&lt;code lisp&gt;
((lambda (x) x) (lambda (y) y))
-&gt; (lambda (y) y)
&lt;/code&gt;

Let&#039;s call this language &#039;&#039;lambda-n&#039;&#039;, and describe its syntax:

&lt;code lisp&gt;
expressions
e ::= x (variables)
    | n (natural numbers 0, 1, ...)
    | b (booleans #t, #f)
    | (if e e e)
    | (zero? e)
    | (sub1 e)
    | (* e e)
    | (lambda (x) e)
    | (e e)

values
v ::= x
    | n
    | b
    | (lambda (x) v)
&lt;/code&gt;

With this syntax, we can define our main rewriting rule, &#039;&#039;beta-n&#039;&#039;:

&lt;code lisp&gt;
((lambda (x) e1) e2) beta-n e1[e2/x]
&lt;/code&gt;

This relation tells us that when we have an expression of the form:
&lt;code lisp&gt;((lambda (x) e1) e2)&lt;/code&gt;

We can rewrite it to the expression &#039;&#039;e1&#039;&#039; where &#039;&#039;e2&#039;&#039; has been substituted for &#039;&#039;x&#039;&#039;. This substitution is not
trivial, however, since it must not change the scope of variables
involved in the substitution. So, we define e1[e2/x] as:

&lt;code lisp&gt;
               x1[e/x1] = e
               x2[e/x1] = x2 if x1 is not x2
(lambda (x1) e1)[e2/x1] = (lambda (x1) e1)
(lambda (x1) e1)[e2/x2] = (lambda (x3) e1[x3/x1][e2/x2])
                          if x1 is not x2,
                             x2 is not x3,
                             x3 is not a free variable in (lambda (x1) e1)
                             and x3 is not a free variable in e2
          (e1 e2)[e3/x] = (e1[e3/x] e2[e3/x])
                 n[e/x] = n if n is a constant
    (if e1 e2 e3)[e4/x] = (if e1[e4/x] e2[e4/x] e3[e4/x])
       (zero? e1)[e2/x] = (zero? e1[e2/x])
                  and so on  ...
&lt;/code&gt;

There are other rewriting rules for constants as well as for deciding
where in a nested expression to apply the next rewriting rule. We
aren&#039;t providing those here, but we are including them in the provided
starter code. For another description of substitutions that may be used for redexes, see //([[http://www.divms.uiowa.edu/~slonnegr/plf/Book/ | Formal Syntax and Semantics of Programming Languages]], Ken Slonneger and 
Barry L. Kurt,  Addison-Wesley Publishing Company, 1995. 146 - 149.)//: {{:sub.pdf}}

If we rewrite a term until no more rewriting rules apply, we have
found a term&#039;s //normal form//, or we&#039;ve encountered an error. This
process is called //normalization//. 

&lt;code lisp&gt;
   ((lambda (x) (+ x 3)) 5)
-&gt; (+ 5 3)
-&gt; 8 ;; normal form
&lt;/code&gt;

&lt;code lisp&gt;
   ((lambda (x) (3 x)) 5)
-&gt; (3 5) ;; error
&lt;/code&gt;

==== Assignment ====

Complete the following definitions to implement normalization for
&#039;&#039;lambda-n&#039;&#039;. After testing your code, answer the questions at the
bottom of the page. Remember, you can use &#039;&#039;(gensym &quot;x&quot;)&#039;&#039; to get a
new unique symbol. Use &#039;&#039;(print-gensym &#039;pretty/suffix)&#039;&#039; at the REPL to make those
unique symbols print nicely.

&lt;code lisp&gt;
(define subst
  (lambda (e^ x e)
    (pmatch e
      [`,n (guard (integer? n)) n]
      [`,b (guard (boolean? b)) b]
      [`(if ,e1 ,e2 ,e3)
       (let ([e1^ (subst e^ x e1)]
             [e2^ (subst e^ x e2)]
             [e3^ (subst e^ x e3)])
         `(if ,e1^ ,e2^ ,e3^))]
      [`(zero? ,e1)
       (let ([e1^ (subst e^ x e1)])
         `(zero? ,e1^))]
      [`(sub1 ,e1)
       (let ([e1^ (subst e^ x e1)])
         `(sub1 ,e1^))]
      [`(* ,e1 ,e2)
       (let ([e1^ (subst e^ x e1)]
             [e2^ (subst e^ x e2)])
         `(* ,e1^ ,e2^))]
      ;; Finish me!
      [`(,e1 ,e2)
       (let ([e1^ (subst e^ x e1)]
             [e2^ (subst e^ x e2)])
         `(,e1^ ,e2^))])))

(define value?
  (lambda (exp)
    (pmatch exp
      [`,x (guard (symbol? x)) #t]
      [`,n (guard (integer? n)) #t]
      [`,b (guard (boolean? b)) #t]
      ;; Finish me!
      [`,else #f])))

(define norm
  (lambda (exp)
    (pmatch exp
      [`,v (guard (value? v)) v]
      [`(if #t ,conseq ,altern)
       (norm conseq)]
      [`(if #f ,conseq ,altern)
       (norm altern)]
      [`(if ,test ,conseq, altern)
       (let ([test^ (norm test)])
         (norm `(if ,test^ ,conseq ,altern)))]
      [`(zero? 0) #t]
      [`(zero? ,e)
       (let ([e^ (norm e)])
         (norm `(zero? ,e^)))]
      [`(sub1 ,n)
       (guard (integer? n))
       (sub1 n)]
      [`(sub1 ,e)
       (let ([e^ (norm e)])
         (norm `(sub1 ,e^)))]
      [`(* ,n1 ,n2)
       (guard (integer? n1) (integer? n2))
       (* n1 n2)]
      [`(* ,n1 ,e)
       (guard (integer? n1))
       (let ([e^ (norm e)])
         (norm `(* ,n1 ,e^)))]
      [`(* ,e1 ,e2)
       (let ([e1^ (norm e1)])
         (norm `(* ,e1^ e2)))]
      [`(lambda (,x) ,e)
       (let ([e^ (norm e)])
         (norm `(lambda (,x) ,e^)))]
      [`(,x ,v)
       (guard (symbol? x) (value? v))
       `(,x ,v)]
      [`(,x ,e)
       (guard (symbol? x))
       (let ([e^ (norm e)])
         (norm `(,x ,e^)))]
      [`((lambda (,x) ,e1) ,e2)
       ;; Finish me!
       ]
      [`(,e1 ,e2)
       (let ([e1^ (norm e1)])
         (norm `(,e1^ ,e2)))]
      [`,x (errorf &#039;norm &quot;invalid expression ~s&quot; x)])))
&lt;/code&gt;

When you have completed the above, you should be able to reduce expressions in this language to normal form. Notice you make no use of an environment when doing so.

---- other version----
Recall the {{:beta.scm|definitions}} of norm and company that were discussed in class. In the definition of norm, we used a call-by-name (or normal order) approach to normalization.  This means that we substitute the rand without normalizing. For example, assuming + and numbers have been added, the current definition of norm (as discussed in class) would yield this result after the first step (**Note that you may use beta-reduce to see the result of norm after the first step.**):

&lt;code lisp&gt;
&gt; ((lambda (x) (+ x x)) (+ 3 5))
(+ (+ 3 5) (+ 3 5))
&lt;/code&gt;

However, we would like to normalize the rand, too, so that the first step of norm would instead yield (+ 8 8), and the second step would yield 16.

=== Things to do for Part ??? ===

  * **First,** modify norm and any others so that they also work with + and numbers.
  * **Second,** understand exactly how norm works, and then revise it to yield the new desired behavior, which is call-by-value (or applicative order).

The assignment is to implement a //single-argument// interpreter for the pure lambda calculus. This interpreter has three major parts:

== The Redex List ==

Given a lambda calculus expression, you should generate (by a pre-order walk) a list of all possible //redexes// that may be applied to the expression. Then, only apply the first one. Iterate until the expression is in //normal form//.


== The Grammar ==

The official grammar is as follows:

&lt;code lisp&gt;
exp ::=   x 
      | (lambda (x) e) 
      | (e1 e2)
&lt;/code&gt;

You may extend the grammar to include all of the following. 

&lt;code lisp&gt;
exp ::= x 
      | (lambda (x) e) 
      | (e1 e2) 
      | (let ((x a) e)
      | (sub1 e) 
      | (zero? e) 
      | (* e1 e2) 
      | (if e1 e2 e3)
&lt;/code&gt;

Implement &#039;&#039;sub1&#039;&#039;, &#039;&#039;zero?&#039;&#039;, &#039;&#039;*&#039;&#039;, and &#039;&#039;if&#039;&#039; as native Scheme forms . The end goal is to run the &#039;&#039;poorman&#039;s y combinator&#039;&#039; version of &#039;&#039;(factorial 5)&#039;&#039;

&lt;code lisp&gt;
((let ((! (lambda (!)
            (lambda (n)
              (if (zero? n) 1 (* n ((! !) (sub1 n))))))))
   (! !))
 5)
&lt;/code&gt;

using only pure lambda calculus. (Hint: getting rid of &#039;&#039;let&#039;&#039; is easy.)

== The Single Argument ==

As stated above, the interpreter should take only one argument: the expression! //Do not simply call a function with an extra argument; this is not what we are asking you do to.//

==== Hard Brainteaser ====

Extend your interpreter to add &#039;&#039;wet&#039;&#039; to your interpreter. Study the
example below to determine the semantics of &#039;&#039;wet&#039;&#039;. **Hint**: It will
help to study the &#039;&#039;set!&#039;&#039; brainteaser for [[Assignment 3]].

&lt;code lisp&gt;
(define wet-test
  &#039;(let ([x 5])
     (let ([f (lambda (y) (+ x y))])
       (let ([g (lambda (z) (+ (f z) z))])
         (+ (wet ([x 6])
              (g 7))
            x)))))

(test &quot;wet-test&quot;
  (value-of-dynamic wet-test (empty-env))
  25)
&lt;/code&gt;

--->

</p>

</div>

    <!-- ......... wikipage stop  ......... -->
  </div>

  <div class="clearer">&nbsp;</div>

  
 
  <!--  footer -->  
  <div class="stylefoot">

        <div class="meta">
      <div class="doc">
		<p>assignment-4.txt ¬∑ Last modified: 2015/09/19 13:24 by jhemann</p>
      </div>
   </div>

    <div>
       <!--  breadcrumbs and search -->
	  	
	  

       
      <div class="clearer"></div>
    </div>

  </div>

</div>





<div class="no"><img src="/~c311/lib/exe/indexer.php?id=assignment-4&amp;1451066355" width="1" height="1" alt=""></div>


</body></html>Ytext/html•#’_WebResourceResponseUutf-8_Ehttps://cgi.soic.indiana.edu/~c311/lib/exe/css.php?s=all&t=doogiestplO?bplist00‘jkX$versionX$objectsY$archiverT$top Ü†Ø #)*0123MNOPQRSTUVWXYZ[\]^_`adeU$null›	
 !"R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1Ä	ÄÄÄ ÄÄÄÄ”$%'(WNS.base[NS.relativeÄ ÄÄ_Ehttps://cgi.soic.indiana.edu/~c311/lib/exe/css.php?s=all&t=doogiestpl“+,-.Z$classnameX$classesUNSURL¢-/XNSObject#Aº-ªê˜˘É »”456ALWNS.keysZNS.objects™789:;<=>?@Ä	Ä
ÄÄÄÄÄÄÄÄ™BCDEFGHIJKÄÄÄÄÄÄÄÄÄÄÄ_Transfer-EncodingZConnectionVPragma]Last-Modified\Content-TypeVServerTDateZKeep-Alive]Cache-ControlTEtagXIdentityZKeep-AliveVpublic_Mon, 07 Jan 2013 17:24:26 GMT_text/css; charset=utf-8_…Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.1e-fips mod_auth_kerb/5.4 mod_fcgid/2.3.9 SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.9dev Perl/v5.16.3_Fri, 25 Dec 2015 17:58:42 GMT_timeout=5, max=100_public, max-age=3600_""ef6f1827233f26a6a85eabf0a4a92db5"“+,bc\NSDictionary¢b/Xtext/css“+,fg_NSHTTPURLResponse£hi/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—lm_WebResourceResponseÄ    # - 2 7 Z ` { ~ Ç Ö à ã è í ô ú ü ¢ • ® ™ ¨ Æ ∞ ≤ ≥ µ ∑ π ª Ω ø ¡ » – ‹ ﬁ ‡ ‚*/:CILU^`biq|áâãçèëìïóôõ¶®™¨Æ∞≤¥∂∏∫º–€‚˝	"'0;Bb|Hh}îπæÀŒ◊‹Ù(+A             n              COÖa.interwiki{background:transparent url(/~c311/lib/images/interwiki.png) 0px 1px no-repeat;padding-left:16px;}a.iw_wp{background-image:url(/~c311/lib/images/interwiki/wp.gif)}a.iw_wpde{background-image:url(/~c311/lib/images/interwiki/wpde.gif)}a.iw_wpmeta{background-image:url(/~c311/lib/images/interwiki/wpmeta.gif)}a.iw_doku{background-image:url(/~c311/lib/images/interwiki/doku.gif)}a.iw_sb{background-image:url(/~c311/lib/images/interwiki/sb.gif)}a.iw_amazon{background-image:url(/~c311/lib/images/interwiki/amazon.gif)}a.iw_amazon_de{background-image:url(/~c311/lib/images/interwiki/amazon.de.gif)}a.iw_amazon_uk{background-image:url(/~c311/lib/images/interwiki/amazon.uk.gif)}a.iw_phpfn{background-image:url(/~c311/lib/images/interwiki/phpfn.gif)}a.iw_dokubug{background-image:url(/~c311/lib/images/interwiki/dokubug.gif)}a.iw_coral{background-image:url(/~c311/lib/images/interwiki/coral.gif)}a.iw_google{background-image:url(/~c311/lib/images/interwiki/google.gif)}a.iw_meatball{background-image:url(/~c311/lib/images/interwiki/meatball.gif)}a.iw_wiki{background-image:url(/~c311/lib/images/interwiki/wiki.gif)}a.mediafile{background:transparent url(/~c311/lib/images/fileicons/file.png) 0px 1px no-repeat;padding-left:18px;padding-bottom:1px;}a.mf_jpg{background-image:url(/~c311/lib/images/fileicons/jpg.png)}a.mf_jpeg{background-image:url(/~c311/lib/images/fileicons/jpeg.png)}a.mf_gif{background-image:url(/~c311/lib/images/fileicons/gif.png)}a.mf_png{background-image:url(/~c311/lib/images/fileicons/png.png)}a.mf_tgz{background-image:url(/~c311/lib/images/fileicons/tgz.png)}a.mf_tar{background-image:url(/~c311/lib/images/fileicons/tar.png)}a.mf_gz{background-image:url(/~c311/lib/images/fileicons/gz.png)}a.mf_bz2{background-image:url(/~c311/lib/images/fileicons/bz2.png)}a.mf_zip{background-image:url(/~c311/lib/images/fileicons/zip.png)}a.mf_rar{background-image:url(/~c311/lib/images/fileicons/rar.png)}a.mf_pdf{background-image:url(/~c311/lib/images/fileicons/pdf.png)}a.mf_ps{background-image:url(/~c311/lib/images/fileicons/ps.png)}a.mf_doc{background-image:url(/~c311/lib/images/fileicons/doc.png)}a.mf_xls{background-image:url(/~c311/lib/images/fileicons/xls.png)}a.mf_ppt{background-image:url(/~c311/lib/images/fileicons/ppt.png)}a.mf_rtf{background-image:url(/~c311/lib/images/fileicons/rtf.png)}a.mf_swf{background-image:url(/~c311/lib/images/fileicons/swf.png)}a.mf_rpm{background-image:url(/~c311/lib/images/fileicons/rpm.png)}a.mf_deb{background-image:url(/~c311/lib/images/fileicons/deb.png)}a.mf_sxw{background-image:url(/~c311/lib/images/fileicons/sxw.png)}a.mf_sxc{background-image:url(/~c311/lib/images/fileicons/sxc.png)}a.mf_sxi{background-image:url(/~c311/lib/images/fileicons/sxi.png)}a.mf_sxd{background-image:url(/~c311/lib/images/fileicons/sxd.png)}a.mf_odc{background-image:url(/~c311/lib/images/fileicons/odc.png)}a.mf_odf{background-image:url(/~c311/lib/images/fileicons/odf.png)}a.mf_odg{background-image:url(/~c311/lib/images/fileicons/odg.png)}a.mf_odi{background-image:url(/~c311/lib/images/fileicons/odi.png)}a.mf_odp{background-image:url(/~c311/lib/images/fileicons/odp.png)}a.mf_ods{background-image:url(/~c311/lib/images/fileicons/ods.png)}a.mf_odt{background-image:url(/~c311/lib/images/fileicons/odt.png)}a.mf_html{background-image:url(/~c311/lib/images/fileicons/html.png)}a.mf_htm{background-image:url(/~c311/lib/images/fileicons/htm.png)}a.mf_txt{background-image:url(/~c311/lib/images/fileicons/txt.png)}Xtext/css’_?https://cgi.soic.indiana.edu/~c311/lib/exe/css.php?t=doogiestplO9bplist00‘jkX$versionX$objectsY$archiverT$top Ü†Ø #)*0123MNOPQRSTUVWXYZ[\]^_`adeU$null›	
 !"R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1Ä	ÄÄÄ ÄÄÄÄ”$%'(WNS.base[NS.relativeÄ ÄÄ_?https://cgi.soic.indiana.edu/~c311/lib/exe/css.php?t=doogiestpl“+,-.Z$classnameX$classesUNSURL¢-/XNSObject#Aº-ªê¯R »”456ALWNS.keysZNS.objects™789:;<=>?@Ä	Ä
ÄÄÄÄÄÄÄÄ™BCDEFGHIJKÄÄÄÄÄÄÄÄÄÄÄ_Transfer-EncodingZConnectionVPragma]Last-Modified\Content-TypeVServerTDateZKeep-Alive]Cache-ControlTEtagXIdentityZKeep-AliveVpublic_Mon, 07 Jan 2013 17:24:26 GMT_text/css; charset=utf-8_…Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.1e-fips mod_auth_kerb/5.4 mod_fcgid/2.3.9 SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.9dev Perl/v5.16.3_Fri, 25 Dec 2015 17:58:43 GMT_timeout=5, max=100_public, max-age=3600_""ef6f1827233f26a6a85eabf0a4a92db5"“+,bc\NSDictionary¢b/Xtext/css“+,fg_NSHTTPURLResponse£hi/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—lm_WebResourceResponseÄ    # - 2 7 Z ` { ~ Ç Ö à ã è í ô ú ü ¢ • ® ™ ¨ Æ ∞ ≤ ≥ µ ∑ π ª Ω ø ¡ » – ‹ ﬁ ‡ ‚$)4=CFOXZ\ckvÅÉÖáâãçèëìï†¢§¶®™¨Æ∞≤¥∂ ’‹Í˜˛!*5<\vBbwé≥∏≈»—÷ÍÓ"%;             n              =Ok9a.interwiki{background:transparent url(/~c311/lib/images/interwiki.png) 0px 1px no-repeat;padding-left:16px;}a.iw_wp{background-image:url(/~c311/lib/images/interwiki/wp.gif)}a.iw_wpde{background-image:url(/~c311/lib/images/interwiki/wpde.gif)}a.iw_wpmeta{background-image:url(/~c311/lib/images/interwiki/wpmeta.gif)}a.iw_doku{background-image:url(/~c311/lib/images/interwiki/doku.gif)}a.iw_sb{background-image:url(/~c311/lib/images/interwiki/sb.gif)}a.iw_amazon{background-image:url(/~c311/lib/images/interwiki/amazon.gif)}a.iw_amazon_de{background-image:url(/~c311/lib/images/interwiki/amazon.de.gif)}a.iw_amazon_uk{background-image:url(/~c311/lib/images/interwiki/amazon.uk.gif)}a.iw_phpfn{background-image:url(/~c311/lib/images/interwiki/phpfn.gif)}a.iw_dokubug{background-image:url(/~c311/lib/images/interwiki/dokubug.gif)}a.iw_coral{background-image:url(/~c311/lib/images/interwiki/coral.gif)}a.iw_google{background-image:url(/~c311/lib/images/interwiki/google.gif)}a.iw_meatball{background-image:url(/~c311/lib/images/interwiki/meatball.gif)}a.iw_wiki{background-image:url(/~c311/lib/images/interwiki/wiki.gif)}a.mediafile{background:transparent url(/~c311/lib/images/fileicons/file.png) 0px 1px no-repeat;padding-left:18px;padding-bottom:1px;}a.mf_jpg{background-image:url(/~c311/lib/images/fileicons/jpg.png)}a.mf_jpeg{background-image:url(/~c311/lib/images/fileicons/jpeg.png)}a.mf_gif{background-image:url(/~c311/lib/images/fileicons/gif.png)}a.mf_png{background-image:url(/~c311/lib/images/fileicons/png.png)}a.mf_tgz{background-image:url(/~c311/lib/images/fileicons/tgz.png)}a.mf_tar{background-image:url(/~c311/lib/images/fileicons/tar.png)}a.mf_gz{background-image:url(/~c311/lib/images/fileicons/gz.png)}a.mf_bz2{background-image:url(/~c311/lib/images/fileicons/bz2.png)}a.mf_zip{background-image:url(/~c311/lib/images/fileicons/zip.png)}a.mf_rar{background-image:url(/~c311/lib/images/fileicons/rar.png)}a.mf_pdf{background-image:url(/~c311/lib/images/fileicons/pdf.png)}a.mf_ps{background-image:url(/~c311/lib/images/fileicons/ps.png)}a.mf_doc{background-image:url(/~c311/lib/images/fileicons/doc.png)}a.mf_xls{background-image:url(/~c311/lib/images/fileicons/xls.png)}a.mf_ppt{background-image:url(/~c311/lib/images/fileicons/ppt.png)}a.mf_rtf{background-image:url(/~c311/lib/images/fileicons/rtf.png)}a.mf_swf{background-image:url(/~c311/lib/images/fileicons/swf.png)}a.mf_rpm{background-image:url(/~c311/lib/images/fileicons/rpm.png)}a.mf_deb{background-image:url(/~c311/lib/images/fileicons/deb.png)}a.mf_sxw{background-image:url(/~c311/lib/images/fileicons/sxw.png)}a.mf_sxc{background-image:url(/~c311/lib/images/fileicons/sxc.png)}a.mf_sxi{background-image:url(/~c311/lib/images/fileicons/sxi.png)}a.mf_sxd{background-image:url(/~c311/lib/images/fileicons/sxd.png)}a.mf_odc{background-image:url(/~c311/lib/images/fileicons/odc.png)}a.mf_odf{background-image:url(/~c311/lib/images/fileicons/odf.png)}a.mf_odg{background-image:url(/~c311/lib/images/fileicons/odg.png)}a.mf_odi{background-image:url(/~c311/lib/images/fileicons/odi.png)}a.mf_odp{background-image:url(/~c311/lib/images/fileicons/odp.png)}a.mf_ods{background-image:url(/~c311/lib/images/fileicons/ods.png)}a.mf_odt{background-image:url(/~c311/lib/images/fileicons/odt.png)}a.mf_html{background-image:url(/~c311/lib/images/fileicons/html.png)}a.mf_htm{background-image:url(/~c311/lib/images/fileicons/htm.png)}a.mf_txt{background-image:url(/~c311/lib/images/fileicons/txt.png)}div.clearer{clear:both;line-height:0px;height:0;overflow:hidden;}div.no{display:inline;margin:0;padding:0;}.hidden{display:none;}div.error{background:#fcc url(/~c311/lib/styles/../images/error.png) 0.5em 0px no-repeat;color:#000;border-bottom:1px solid #faa;font-size:90%;margin:0;padding-left:3em;overflow:hidden;}div.info{background:#ccf url(/~c311/lib/styles/../images/info.png) 0.5em 0px no-repeat;color:#000;border-bottom:1px solid #aaf;font-size:90%;margin:0;padding-left:3em;overflow:hidden;}div.success{background:#cfc url(/~c311/lib/styles/../images/success.png) 0.5em 0px no-repeat;color:#000;border-bottom:1px solid #afa;font-size:90%;margin:0;padding-left:3em;overflow:hidden;}div.notify{background:#ffc url(/~c311/lib/styles/../images/notify.png) 0.5em 0px no-repeat;color:#000;border-bottom:1px solid #ffa;font-size:90%;margin:0;padding-left:3em;overflow:hidden;}.medialeft{float:left;}.mediaright{float:right;}.mediacenter{display:block;margin-left:auto;margin-right:auto;}.leftalign{text-align:left;}.centeralign{text-align:center;}.rightalign{text-align:right;}em.u{font-style:normal;text-decoration:underline;}em em.u{font-style:italic;}.code .br0{color:#6c6;}.code .co1{color:#808080;font-style:italic;}.code .co2{color:#808080;font-style:italic;}.code .co3{color:#808080;}.code .coMULTI{color:#808080;font-style:italic;}.code .es0{color:#009;font-weight:bold;}.code .kw1{color:#b1b100;}.code .kw2{color:#000;font-weight:bold;}.code .kw3{color:#006;}.code .kw4{color:#933;}.code .kw5{color:#00f;}.code .me1{color:#060;}.code .me2{color:#060;}.code .nu0{color:#c6c;}.code .re0{color:#00f;}.code .re1{color:#00f;}.code .re2{color:#00f;}.code .re3{color:#f33;font-weight:bold;}.code .re4{color:#099;}.code .st0{color:#f00;}.code .sy0{color:#6c6;}div#acl_manager div#acl__tree{font-size:90%;width:25%;height:300px;float:left;overflow:auto;border:1px solid #CCC;text-align:left;}div#acl_manager div#acl__tree a.cur{background-color:#ff9;font-weight:bold;}div#acl_manager div#acl__tree ul{list-style-type:none;margin:0;padding:0;}div#acl_manager div#acl__tree li{padding-left:1em;}div#acl_manager div#acl__tree ul img{margin-right:0.25em;cursor:pointer;}div#acl_manager div#acl__detail{width:73%;height:300px;float:right;overflow:auto;}div#acl_manager div#acl__detail fieldset{width:90%;}div#acl_manager div#acl__detail div#acl__user{border:1px solid #CCC;padding:0.5em;margin-bottom:0.6em;}div#acl_manager table.inline{width:100%;margin:0;}div#acl_manager .aclgroup{background:transparent url(/~c311/lib/plugins/acl/pix/group.png) 0px 1px no-repeat;padding:1px 0px 1px 18px;}div#acl_manager .acluser{background:transparent url(/~c311/lib/plugins/acl/pix/user.png) 0px 1px no-repeat;padding:1px 0px 1px 18px;}div#acl_manager .aclpage{background:transparent url(/~c311/lib/plugins/acl/pix/page.png) 0px 1px no-repeat;padding:1px 0px 1px 18px;}div#acl_manager .aclns{background:transparent url(/~c311/lib/plugins/acl/pix/ns.png) 0px 1px no-repeat;padding:1px 0px 1px 18px;}div#acl_manager label.disabled{color:#666!important;}#acl_manager label{text-align:left;font-weight:normal;display:inline;}#acl_manager table{margin-left:10%;width:80%;}#acl_manager table tr{background-color:inherit;}#acl_manager table tr:hover{background-color:#dee7ec;}blockquote.blockquote-plugin{margin:1em 3em 1em 3em !important;border:1px dotted #CCC !important;background:#e8e8e8 url(/~c311/lib/plugins/blockquote/images/blockquote.gif) no-repeat 0.3em 0.3em !important;padding:1em !important;}blockquote.blockquote-plugin[cite]:after{font-style:italic;text-align:right;display:block;content:"‚Äî" attr(cite);}cite.blockquote-plugin{font-style:italic;text-align:right;display:block;}cite.blockquote-plugin:before{content:"‚Äî";}#config__manager div.success,#config__manager div.error,#config__manager div.info{background-position:0.5em;padding:0.5em;text-align:center;}#config__manager fieldset{margin:1em;width:auto;margin-bottom:2em;background-color:#dee7ec;color:#000;padding:0 1em;}#config__manager legend{font-size:1.25em;}#config__manager form{}#config__manager table{margin:1em 0;width:100%;}#config__manager fieldset td{text-align:left;}#config__manager fieldset td.value{width:30em;}#config__manager td.label{padding:0.8em 0 0.6em 1em;vertical-align:top;}#config__manager td.label label{clear:both;display:block;}#config__manager td.label span.outkey{font-size:70%;margin-top:-1.7em;margin-left:-1em;display:block;background-color:#fff;color:#666;float:left;padding:0 0.1em;position:relative;z-index:1;}#config__manager td input.edit{width:30em;}#config__manager td select.edit{}#config__manager td textarea.edit{width:27.5em;height:4em;}#config__manager tr .input,#config__manager tr input,#config__manager tr textarea,#config__manager tr select{background-color:#fff;color:#000;}#config__manager tr.default .input,#config__manager tr.default input,#config__manager tr.default textarea,#config__manager tr.default select,#config__manager .selectiondefault{background-color:#cdf;color:#000;}#config__manager tr.protected .input,#config__manager tr.protected input,#config__manager tr.protected textarea,#config__manager tr.protected select,#config__manager tr.protected .selection{background-color:#fcc!important;color:#000 !important;}#config__manager td.error{background-color:red;color:#000;}#config__manager .selection{width:14.8em;float:left;margin:0 0.3em 2px 0;}#config__manager .selection label{float:right;width:14em;font-size:90%;}* html #config__manager .selection label{padding-top:2px;}#config__manager .selection input.checkbox{padding-left:0.7em;}#config__manager .other{clear:both;padding-top:0.5em;}#config__manager .other label{padding-left:2px;font-size:90%;}#user__manager tr.disabled{color:#6f6f6f;background:#e4e4e4;}#user__manager tr.user_info{vertical-align:top;}#user__manager div.edit_user{width:46%;float:left;}#user__manager table{margin-bottom:1em;}#user__manager input.button[disabled]{color:#ccc!important;border-color:#ccc!important;}#plugin__manager{}#plugin__manager h2{margin-left:0;}#plugin__manager form{display:block;margin:0;padding:0;}#plugin__manager legend{display:none;}#plugin__manager fieldset{width:auto;}#plugin__manager .button{margin:0;}#plugin__manager p,#plugin__manager label{text-align:left;}#plugin__manager .hidden{display:none;}#plugin__manager .new{background:#dee7ec;}#plugin__manager input[disabled]{color:#ccc;border-color:#ccc;}#plugin__manager .pm_menu,#plugin__manager .pm_info{margin-left:0;text-align:left;}#plugin__manager .pm_menu{float:left;width:48%;}#plugin__manager .pm_info{float:right;width:50%;}#plugin__manager .common{}#plugin__manager .common form{}#plugin__manager .common fieldset{margin:0;padding:0 0 1.0em 0;text-align:left;border:none;}#plugin__manager .common label{padding:0 0 0.5em 0;}#plugin__manager .common input{}#plugin__manager .common input.edit{width:24em;margin:0.5em;}#plugin__manager .common .button{}#plugin__manager form.plugins{}#plugin__manager .plugins fieldset{color:#000;background:#fff;text-align:right;border-top:none;border-right:none;border-left:none;}#plugin__manager .plugins fieldset.protected{background:#fdd;color:#000;}#plugin__manager .plugins fieldset.disabled{background:#e0e0e0;color:#a8a8a8;}#plugin__manager .plugins .legend{color:#000;background:inherit;display:block;margin:0;padding:0;font-size:1em;line-height:1.4em;font-weight:normal;text-align:left;float:left;padding:0;clear:none;}#plugin__manager .plugins .button{font-size:95%;}#plugin__manager .plugins fieldset.buttons{border:none;}#plugin__manager .plugins fieldset.buttons .button{float:left;}#plugin__manager .pm_info h3{margin-left:0;}#plugin__manager .pm_info dl{margin:1em 0;padding:0;}#plugin__manager .pm_info dt{width:6em;float:left;clear:left;margin:0;padding:0;}#plugin__manager .pm_info dd{margin:0 0 0 7em;padding:0;background:none;}#plugin__manager .plugins .enable{float:left;width:auto;margin-right:0.5em;}div.dokuwiki .header{background-color:#1b325f;margin:5px;height:130px;min-width:825px;position:relative;z-index:0;}div.dokuwiki .header_left{position:absolute;top:0px;left:0px;width:350px;height:130px;z-index:1;}div.dokuwiki .logo{position:absolute;top:45px;left:30px;font-size:175%;text-align:left;white-space:nowrap;z-index:2;}div.dokuwiki .logo a{color:#dee7ec !important;text-decoration:none !important;}div.dokuwiki .header_right{position:absolute;top:0px;right:0px;width:475px;height:130px;z-index:1;}div.dokuwiki .pagename{position:absolute;top:45px;right:30px;font-size:100%;font-weight:bolder;color:#dee7ec;text-align:right;white-space:nowrap;z-index:2;}div.dokuwiki .pagename a{color:white !important;text-decoration:none !important;}div.dokuwiki .tabnavi{position:absolute;left:480px;bottom:0px;width:800px;margin-left:-400px;z-index:5;}div.dokuwiki #tabnavi ul{margin:0;padding:0;list-style:none;}div.dokuwiki #tabnavi li{float:left;padding:0 0 0 7px;margin:0 10px 0 0;background:url(/~c311/lib/tpl/doogiestpl/images/rounded-corners-left.png) no-repeat top left;}div.dokuwiki #tabnavi a{display:block;color:#dee7ec;margin:0;padding:4px 12px 0 5px;background:url(/~c311/lib/tpl/doogiestpl/images/rounded-corners-right.png) no-repeat top right;}div.dokuwiki #tabnavi #current{color:#000;font-weight:bolder;padding:0 0 0 7px;margin:0 10px 0 0;background:url(/~c311/lib/tpl/doogiestpl/images/rounded-corners-left-active.png) no-repeat top left;}div.dokuwiki #tabnavi #current_inner{margin:0;padding:4px 12px 1px 5px;background:url(/~c311/lib/tpl/doogiestpl/images/rounded-corners-right-active.png) no-repeat top right;}div.dokuwiki div.hfeed{}div.dokuwiki div.hfeed div.hentry{margin-bottom:15px;background:url(/~c311/lib/tpl/doogiestpl/images/gradient.png) no-repeat top;}div.dokuwiki div.hfeed div.entry-content{padding:5px;}div.dokuwiki div.hfeed h1,div.dokuwiki div.hfeed h2{margin-top:0px;margin-bottom:0px;padding-left:15px;}div.dokuwiki div.hfeed div.inclmeta{border:none;padding:0 5px 15px 15px;margin:0;}div.dokuwiki div.inclmeta .tags{background:transparent url(/~c311/lib/tpl/doogiestpl/images/tag.gif) 0px 1px no-repeat;padding:1px 0px 1px 16px;font-size:100%;text-align:left;float:none;clear:none;}div.dokuwiki .bar{border-top:1px solid #CCC;border-bottom:1px solid #CCC;background:#dee7ec;padding:0 15px;clear:both;}div.dokuwiki .bar-left{float:left;}div.dokuwiki .bar-right{float:right;text-align:right;}div.dokuwiki #bar__bottom{padding-bottom:1em;margin-bottom:5px;}div.dokuwiki div.meta{clear:both;color:#638c9c;font-size:80%;margin-top:20px;margin-bottom:10px;}div.dokuwiki div.meta div.user{float:left;padding-left:10px;}div.dokuwiki div.meta div.doc{text-align:center;}*{padding:0;margin:0;}body{font:90% Helvetica,Arial,sans-serif;background-color:wik;color:#000;}div.dokuwiki div.page{margin:0 auto;padding:0 80px 0 80px;}div.dokuwiki table{font-size:100%;}div.dokuwiki tr,div.dokuwiki td,div.dokuwiki th{}div.dokuwiki img{border:0;}div.dokuwiki p{margin-bottom:0.5em;}div.dokuwiki blockquote,div.dokuwiki table,div.dokuwiki pre{margin:0 0 1.0em 0;}div.dokuwiki hr{border:0px;border-top:1px solid #CCC;text-align:center;height:0px;}div.dokuwiki div.nothing{text-align:center;margin:2em;}div.dokuwiki form{border:none;display:inline;}div.dokuwiki label.block{display:block;text-align:right;font-weight:bold;}div.dokuwiki label.simple{display:block;text-align:left;font-weight:normal;}div.dokuwiki label.block input.edit{width:50%;}div.dokuwiki fieldset{width:300px;text-align:center;border:1px solid #CCC;padding:0.5em;margin:auto;}div.dokuwiki textarea.edit{font-family:monospace;font-size:14px;color:#000;background-color:#fff;border:1px solid #CCC;padding:0.3em 0 0 0.3em;width:100%;}html>body div.dokuwiki textarea.edit{background:#fff url(/~c311/lib/tpl/doogiestpl/images/inputshadow.png) repeat-x top;}div.dokuwiki input.edit,div.dokuwiki select.edit{font-size:100%;border:1px solid #CCC;color:#000;background-color:#fff;vertical-align:middle;margin:1px;padding:0.20em 0.3em;display:inline;}html>body div.dokuwiki input.edit,html>body div.dokuwiki select.edit{background:#fff url(/~c311/lib/tpl/doogiestpl/images/inputshadow.png) repeat-x top;}div.dokuwiki select.edit{padding:0.1em 0;}div.dokuwiki input.missing{font-size:100%;border:1px solid #CCC;color:#000;background-color:#fcc;vertical-align:middle;margin:1px;padding:0.20em 0.3em;display:inline;}div.dokuwiki textarea.edit[disabled],div.dokuwiki textarea.edit[readonly],div.dokuwiki input.edit[disabled],div.dokuwiki input.edit[readonly],div.dokuwiki select.edit[disabled]{background-color:#e8e8e8!important;color:#666!important;}div.dokuwiki div.toolbar,div.dokuwiki div#wiki__editbar{margin:2px 0;text-align:left;}div.dokuwiki div#size__ctl{float:right;width:60px;height:2.7em;}div.dokuwiki #size__ctl img{cursor:pointer;}div.dokuwiki div#wiki__editbar div.editButtons{float:left;padding:0 1.0em 0.7em 0;}div.dokuwiki div#wiki__editbar div.summary{float:left;}div.dokuwiki .nowrap{white-space:nowrap;}div.dokuwiki div#draft__status{float:right;color:#638c9c;}div.dokuwiki input.button,div.dokuwiki button.button{border:1px solid #CCC;color:#000;background-color:#fff;vertical-align:middle;text-decoration:none;font-size:100%;cursor:pointer;margin:1px;padding:0.125em 0.4em;}html>body div.dokuwiki input.button,html>body div.dokuwiki button.button{background:#fff url(/~c311/lib/tpl/doogiestpl/images/buttonshadow.png) repeat-x bottom;}* html div.dokuwiki input.button,* html div.dokuwiki button.button{height:1.8em;}div.dokuwiki div.secedit input.button{border:1px solid #CCC;color:#000;background-color:#fff;vertical-align:middle;text-decoration:none;margin:0;padding:0;font-size:10px;cursor:pointer;float:right;display:inline;}div.dokuwiki div.pagenav{margin:1em 0 0 0;}div.dokuwiki div.pagenav-prev{text-align:right;float:left;width:49%}div.dokuwiki div.pagenav-next{text-align:left;float:right;width:49%}div.dokuwiki a:link,div.dokuwiki a:visited{color:#436976;text-decoration:none;}div.dokuwiki a:hover,div.dokuwiki a:active{color:#000;text-decoration:underline;}div.dokuwiki h1 a,div.dokuwiki h2 a,div.dokuwiki h3 a,div.dokuwiki h4 a,div.dokuwiki h5 a,div.dokuwiki a.nolink{color:#000 !important;text-decoration:none !important;}div.dokuwiki a.urlextern{background:transparent url(/~c311/lib/tpl/doogiestpl/images/link_icon.gif) 0px 1px no-repeat;padding:1px 0px 1px 16px;}div.dokuwiki a.windows{background:transparent url(/~c311/lib/tpl/doogiestpl/images/windows.gif) 0px 1px no-repeat;padding:1px 0px 1px 16px;}div.dokuwiki a.interwiki{}div.dokuwiki a.media{}div.dokuwiki a.urlextern:link,div.dokuwiki a.windows:link,div.dokuwiki a.interwiki:link{color:#436976;}div.dokuwiki a.urlextern:visited,div.dokuwiki a.windows:visited,div.dokuwiki a.interwiki:visited{color:purple;}div.dokuwiki a.urlextern:hover,div.dokuwiki a.urlextern:active,div.dokuwiki a.windows:hover,div.dokuwiki a.windows:active,div.dokuwiki a.interwiki:hover,div.dokuwiki a.interwiki:active{color:#000;}div.dokuwiki a.mail{background:transparent url(/~c311/lib/tpl/doogiestpl/images/mail_icon.gif) 0px 1px no-repeat;padding:1px 0px 1px 16px;}div.dokuwiki a.wikilink1{color:#00E !important;}div.dokuwiki a.wikilink2{color:#f30 !important;text-decoration:none !important;border-bottom:dashed 1px #f30 !important;}div.dokuwiki div.preview{background-color:#e8e8e8;margin:0 0 0 2em;padding:4px;border:1px dashed #000;}div.dokuwiki div.breadcrumbs{background-color:#dee7ec;color:#638c9c;font-size:80%;}div.dokuwiki span.user{color:#ccc;font-size:90%;}div.dokuwiki li.minor{color:#666;font-style:italic;}div.dokuwiki img.media{margin:3px;}div.dokuwiki img.medialeft{border:0;float:left;margin:0 1.5em 0 0;}div.dokuwiki img.mediaright{border:0;float:right;margin:0 0 0 1.5em;}div.dokuwiki img.mediacenter{border:0;display:block;margin:0 auto;}div.dokuwiki img.middle{vertical-align:middle;}div.dokuwiki acronym{cursor:help;border-bottom:1px dotted #000;}div.dokuwiki h1,div.dokuwiki h2,div.dokuwiki h3,div.dokuwiki h4,div.dokuwiki h5{color:#000;background-color:inherit;font-size:100%;font-weight:normal;margin-top:15px;margin-bottom:8px;border-bottom:1px solid #dee7ec;clear:left;}div.dokuwiki h1{font-size:160%;margin-left:0px;font-weight:bold;}div.dokuwiki h2{font-size:150%;margin-left:0px;}div.dokuwiki h3{font-size:140%;margin-left:0px;border-bottom:none;font-weight:bold;}div.dokuwiki h4{font-size:120%;margin-left:0px;border-bottom:none;font-weight:bold;}div.dokuwiki h5{font-size:100%;margin-left:0px;border-bottom:none;font-weight:bold;}div.dokuwiki ul{line-height:1.5em;list-style-type:square;list-style-image:none;margin:0 0 0.5em 1.5em;color:#638c9c;}div.dokuwiki ol{line-height:1.5em;list-style-image:none;margin:0 0 0.5em 1.5em;color:#638c9c;font-weight:bold;}div.dokuwiki .li{color:#000;font-weight:normal;}div.dokuwiki ol{list-style-type:decimal}div.dokuwiki ol ol{list-style-type:upper-roman}div.dokuwiki ol ol ol{list-style-type:lower-alpha}div.dokuwiki ol ol ol ol{list-style-type:lower-greek}div.dokuwiki li.open{list-style-image:url(/~c311/lib/tpl/doogiestpl/images/open.gif);}div.dokuwiki li.closed{list-style-image:url(/~c311/lib/tpl/doogiestpl/images/closed.gif);}div.dokuwiki blockquote{border-left:2px solid #CCC;padding-left:3px;}div.dokuwiki pre{font-size:120%;padding:0.5em;border:1px dashed #CCC;color:#000;overflow:auto;}div.dokuwiki pre.pre{background-color:#f7f9fa;}0re.code{background-color:#f7f9fa;}div.dokuwiki code{font-size:120%;}div.dokuwiki pre.file{background-color:#dee7ec;}div.dokuwiki table.inline{background-color:#fff;border-spacing:0px;border-collapse:collapse;}div.dokuwiki table.inline th{padding:3px;border:1px solid #CCC;background-color:#dee7ec;}div.dokuwiki table.inline td{padding:3px;border:1px solid #CCC;}div.dokuwiki div.toc{margin:0 0 0 2em;float:right;width:200px;font-size:80%;z-index:99;clear:both;}div.dokuwiki div.tocheader{border:1px solid #CCC;background-color:#dee7ec;text-align:left;font-weight:normal;padding:3px;margin-bottom:2px;}div.dokuwiki span.toc_open,div.dokuwiki span.toc_close{border:0.4em solid #dee7ec;float:right;display:block;margin:0.4em 3px 0 0;}div.dokuwiki span.toc_open span,div.dokuwiki span.toc_close span{display:none;}div.dokuwiki span.toc_open{margin-top:0.4em;border-top:0.4em solid #000;}div.dokuwiki span.toc_close{margin-top:0;border-bottom:0.4em solid #000;}div.dokuwiki #toc__inside{border:1px solid #CCC;background-color:#fff;text-align:left;padding:0.5em 0 0.7em 0;}div.dokuwiki ul.toc{list-style-type:none;list-style-image:none;line-height:1.2em;padding-left:1em;margin:0;}div.dokuwiki ul.toc li{background:transparent url(/~c311/lib/tpl/doogiestpl/images/tocdot2.gif) 0 0.6em no-repeat;padding-left:0.4em;}div.dokuwiki ul.toc li.clear{background-image:none;padding-left:0.4em;}div.dokuwiki a.toc:link,div.dokuwiki a.toc:visited{color:#436976;}div.dokuwiki a.toc:hover,div.dokuwiki a.toc:active{color:#000;}div.dokuwiki table.diff{background-color:#fff;width:100%;}div.dokuwiki td.diff-blockheader{font-weight:bold;}div.dokuwiki table.diff th{border-bottom:1px solid #CCC;font-size:120%;width:50%;font-weight:normal;text-align:left;}div.dokuwiki table.diff td{font-family:monospace;font-size:100%;}div.dokuwiki td.diff-addedline{background-color:#dfd;}div.dokuwiki td.diff-deletedline{background-color:#ffb;}div.dokuwiki td.diff-context{background-color:#e8e8e8;}div.dokuwiki table.diff td.diff-addedline strong,div.dokuwiki table.diff td.diff-deletedline strong{color:red;}div.dokuwiki div.footnotes{clear:both;border-top:1px solid #CCC;padding-left:1em;margin-top:1em;}div.dokuwiki div.fn{font-size:90%;}div.dokuwiki a.fn_bot{font-weight:bold;}div.insitu-footnote{font-size:80%;line-height:1.2em;border:1px solid #CCC;background-color:#f7f9fa;text-align:left;padding:4px;max-width:40%;}* html .insitu-footnote pre.code,* html .insitu-footnote pre.file{padding-bottom:18px;}div.dokuwiki .search_result{margin-bottom:6px;padding:0 10px 0 30px;}div.dokuwiki .search_snippet{color:#ccc;font-size:12px;margin-left:20px;}div.dokuwiki .search_sep{color:#000;}div.dokuwiki .search_hit{color:#000;background-color:#ff9;}div.dokuwiki strong.search_hit{font-weight:normal;}div.dokuwiki div.search_quickresult{margin:0 0 15px 30px;padding:0 10px 10px 0;border-bottom:1px dashed #CCC;}div.dokuwiki div.search_quickresult h3{margin:0 0 1.0em 0;font-size:1em;font-weight:bold;}div.dokuwiki ul.search_quickhits{margin:0 0 0.5em 1.0em;}div.dokuwiki ul.search_quickhits li{margin:0 1.0em 0 1.0em;float:left;width:30%;}div.footerinc{text-align:center;}.footerinc a img{opacity:0.5;border:0;}.footerinc a:hover img{opacity:1;}div.dokuwiki .search{position:relative;}div.dokuwiki div.ajax_qsearch{position:absolute;right:0px;bottom:25px;width:200px;opacity:0.9;display:none;font-size:80%;line-height:1.2em;border:1px solid #CCC;background-color:#f7f9fa;text-align:left;padding:4px;}button.toolbutton{background-color:#fff;padding:0px;margin:0 1px 0 0;border:1px solid #CCC;cursor:pointer;}html>body button.toolbutton{background:#fff url(/~c311/lib/tpl/doogiestpl/images/buttonshadow.png) repeat-x bottom;}div.picker{width:250px;border:1px solid #CCC;background-color:#dee7ec;}button.pickerbutton{padding:0px;margin:0 1px 1px 0;border:0;background-color:transparent;font-size:80%;cursor:pointer;}div.dokuwiki div.img_big{float:left;margin-right:0.5em;}div.dokuwiki dl.img_tags dt{font-weight:bold;background-color:#dee7ec;}div.dokuwiki dl.img_tags dd{background-color:#e8e8e8;}div.dokuwiki div.imagemeta{color:#666;font-size:70%;line-height:95%;}div.dokuwiki div.imagemeta img.thumb{float:left;margin-right:0.1em;}#media__manager{height:100%;overflow:hidden;}#media__left{width:30%;border-right:solid 1px #CCC;height:100%;overflow:auto;position:absolute;left:0;}#media__right{width:69.7%;height:100%;overflow:auto;position:absolute;right:0;}#media__manager h1{margin:0;padding:0;margin-bottom:0.5em;}#media__tree img{float:left;padding:0.5em 0.3em 0 0;}#media__tree ul{list-style-type:none;list-style-image:none;}#media__tree li{clear:left;list-style-type:none;list-style-image:none;}*+html #media__tree li,* html #media__tree li{border:1px solid #fff;}#media__opts{padding-left:1em;margin-bottom:0.5em;}#media__opts input{float:left;position:absolute;}*+html #media__opts input,* html #media__opts input{position:static;}#media__opts label{display:block;float:left;margin-left:30px;}*+html #media__opts label,* html #media__opts label{margin-left:10px;}#media__opts br{clear:left;}#media__content img.load{margin:1em auto;}#media__content #scroll__here{border:1px dashed #CCC;}#media__content .odd{background-color:#f7f9fa;padding:0.4em;}#media__content .even{padding:0.4em;}#media__content a.mediafile{margin-right:1.5em;font-weight:bold;}#media__content div.detail{padding:0.3em 0 0.3em 2em;}#media__content div.detail div.thumb{float:left;width:130px;text-align:center;margin-right:0.4em;}#media__content img.btn{vertical-align:text-bottom;}#media__content div.example{color:#666;margin-left:1em;}#media__content div.upload{font-size:90%;padding:0 0.5em 0.5em 0.5em;}#media__content form#dw__upload{display:block;border-bottom:solid 1px #CCC;padding:0 0.5em 1em 0.5em;}#media__content form#dw__upload fieldset{padding:0;margin:0;border:none;width:auto;}#media__content form#dw__upload p{text-align:left;padding:0.25em 0;margin:0;line-height:1.0em;}#media__content form#dw__upload label.check{float:none;width:auto;margin-left:11.5em;}#media__content form.meta{display:block;padding:0 0 1em 0;}#media__content form.meta label{display:block;width:25%;float:left;font-weight:bold;margin-left:1em;clear:left;}#media__content form.meta .edit{font:100% "Lucida Grande",Verdana,Lucida,Helvetica,Arial,sans-serif;float:left;width:70%;padding-right:0;padding-left:0.2em;margin:2px;}#media__content form.meta textarea.edit{height:8em;}#media__content form.meta div.metafield{clear:left;}#media__content form.meta div.buttons{clear:left;margin-left:20%;padding-left:1em;}html>body div.dokuwiki form.btn_edit input.button{padding:0.125em 0.4em 0.125em 2em;background:#fff url(/~c311/lib/tpl/doogiestpl/images/UWEBshadow.png) no-repeat left bottom;}’_Ghttps://cgi.soic.indiana.edu/~c311/lib/exe/css.php?s=print&t=doogiestplOAbplist00‘jkX$versionX$objectsY$archiverT$top Ü†Ø #)*0123MNOPQRSTUVWXYZ[\]^_`adeU$null›	
 !"R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1Ä	ÄÄÄ ÄÄÄÄ”$%'(WNS.base[NS.relativeÄ ÄÄ_Ghttps://cgi.soic.indiana.edu/~c311/lib/exe/css.php?s=print&t=doogiestpl“+,-.Z$classnameX$classesUNSURL¢-/XNSObject#Aº-ªê¯"ˇ »”456ALWNS.keysZNS.objects™789:;<=>?@Ä	Ä
ÄÄÄÄÄÄÄÄ™BCDEFGHIJKÄÄÄÄÄÄÄÄÄÄÄ_Transfer-EncodingZConnectionVPragma]Last-Modified\Content-TypeVServerTDateZKeep-Alive]Cache-ControlTEtagXIdentityZKeep-AliveVpublic_Mon, 07 Jan 2013 17:24:26 GMT_text/css; charset=utf-8_…Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.1e-fips mod_auth_kerb/5.4 mod_fcgid/2.3.9 SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.9dev Perl/v5.16.3_Fri, 25 Dec 2015 17:58:43 GMT_timeout=5, max=100_public, max-age=3600_""ef6f1827233f26a6a85eabf0a4a92db5"“+,bc\NSDictionary¢b/Xtext/css“+,fg_NSHTTPURLResponse£hi/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—lm_WebResourceResponseÄ    # - 2 7 Z ` { ~ Ç Ö à ã è í ô ú ü ¢ • ® ™ ¨ Æ ∞ ≤ ≥ µ ∑ π ª Ω ø ¡ » – ‹ ﬁ ‡ ‚,1<EKNW`bdks~âãçèëìïóôõù®™¨Æ∞≤¥∂∏∫ºæ“›‰Úˇ$)2=Dd~Jjñª¿Õ–ŸﬁÚˆ
*-C             n              EOáa.interwiki{background:transparent url(/~c311/lib/images/interwiki.png) 0px 1px no-repeat;padding-left:16px;}a.iw_wp{background-image:url(/~c311/lib/images/interwiki/wp.gif)}a.iw_wpde{background-image:url(/~c311/lib/images/interwiki/wpde.gif)}a.iw_wpmeta{background-image:url(/~c311/lib/images/interwiki/wpmeta.gif)}a.iw_doku{background-image:url(/~c311/lib/images/interwiki/doku.gif)}a.iw_sb{background-image:url(/~c311/lib/images/interwiki/sb.gif)}a.iw_amazon{background-image:url(/~c311/lib/images/interwiki/amazon.gif)}a.iw_amazon_de{background-image:url(/~c311/lib/images/interwiki/amazon.de.gif)}a.iw_amazon_uk{background-image:url(/~c311/lib/images/interwiki/amazon.uk.gif)}a.iw_phpfn{background-image:url(/~c311/lib/images/interwiki/phpfn.gif)}a.iw_dokubug{background-image:url(/~c311/lib/images/interwiki/dokubug.gif)}a.iw_coral{background-image:url(/~c311/lib/images/interwiki/coral.gif)}a.iw_google{background-image:url(/~c311/lib/images/interwiki/google.gif)}a.iw_meatball{background-image:url(/~c311/lib/images/interwiki/meatball.gif)}a.iw_wiki{background-image:url(/~c311/lib/images/interwiki/wiki.gif)}a.mediafile{background:transparent url(/~c311/lib/images/fileicons/file.png) 0px 1px no-repeat;padding-left:18px;padding-bottom:1px;}a.mf_jpg{background-image:url(/~c311/lib/images/fileicons/jpg.png)}a.mf_jpeg{background-image:url(/~c311/lib/images/fileicons/jpeg.png)}a.mf_gif{background-image:url(/~c311/lib/images/fileicons/gif.png)}a.mf_png{background-image:url(/~c311/lib/images/fileicons/png.png)}a.mf_tgz{background-image:url(/~c311/lib/images/fileicons/tgz.png)}a.mf_tar{background-image:url(/~c311/lib/images/fileicons/tar.png)}a.mf_gz{background-image:url(/~c311/lib/images/fileicons/gz.png)}a.mf_bz2{background-image:url(/~c311/lib/images/fileicons/bz2.png)}a.mf_zip{background-image:url(/~c311/lib/images/fileicons/zip.png)}a.mf_rar{background-image:url(/~c311/lib/images/fileicons/rar.png)}a.mf_pdf{background-image:url(/~c311/lib/images/fileicons/pdf.png)}a.mf_ps{background-image:url(/~c311/lib/images/fileicons/ps.png)}a.mf_doc{background-image:url(/~c311/lib/images/fileicons/doc.png)}a.mf_xls{background-image:url(/~c311/lib/images/fileicons/xls.png)}a.mf_ppt{background-image:url(/~c311/lib/images/fileicons/ppt.png)}a.mf_rtf{background-image:url(/~c311/lib/images/fileicons/rtf.png)}a.mf_swf{background-image:url(/~c311/lib/images/fileicons/swf.png)}a.mf_rpm{background-image:url(/~c311/lib/images/fileicons/rpm.png)}a.mf_deb{background-image:url(/~c311/lib/images/fileicons/deb.png)}a.mf_sxw{background-image:url(/~c311/lib/images/fileicons/sxw.png)}a.mf_sxc{background-image:url(/~c311/lib/images/fileicons/sxc.png)}a.mf_sxi{background-image:url(/~c311/lib/images/fileicons/sxi.png)}a.mf_sxd{background-image:url(/~c311/lib/images/fileicons/sxd.png)}a.mf_odc{background-image:url(/~c311/lib/images/fileicons/odc.png)}a.mf_odf{background-image:url(/~c311/lib/images/fileicons/odf.png)}a.mf_odg{background-image:url(/~c311/lib/images/fileicons/odg.png)}a.mf_odi{background-image:url(/~c311/lib/images/fileicons/odi.png)}a.mf_odp{background-image:url(/~c311/lib/images/fileicons/odp.png)}a.mf_ods{background-image:url(/~c311/lib/images/fileicons/ods.png)}a.mf_odt{background-image:url(/~c311/lib/images/fileicons/odt.png)}a.mf_html{background-image:url(/~c311/lib/images/fileicons/html.png)}a.mf_htm{background-image:url(/~c311/lib/images/fileicons/htm.png)}a.mf_txt{background-image:url(/~c311/lib/images/fileicons/txt.png)}body{font:10pt "Lucida Grande",Verdana,Lucida,Helvetica,Arial,sans-serif;background-color:White;color:Black;}table{font-size:100%;padding:0;margin:0;}tr,td,th{padding:0;margin:0;}img{border:0}a{color:#000;text-decoration:none;background:none !important;}div.meta{clear:both;margin-top:1em;font-size:70%;text-align:right;}div.notify,div.info,div.success,div.error,div.breadcrumbs,div.secedit{display:none;}a.urlextern:after{content:" [" attr(href) "]";font-size:90%;}a.interwiki:after{content:" [" attr(href) "]";font-size:90%;}a.mail:after{content:" [" attr(href) "]";font-size:90%;}a.wikilink1{text-decoration:underline}div.page{text-align:justify;}h1,h2,h3,h4,h5{color:Black;background-color:transparent;font-family:"Lucida Grande",Verdana,Lucida,Helvetica,Arial,sans-serif;font-size:100%;font-weight:normal;margin-left:0;margin-right:0;margin-top:0;margin-bottom:1em;padding-left:0;padding-right:0;padding-top:0.5em;padding-bottom:0;border-bottom:1px solid #000;clear:left;}h1{font-size:160%;font-weight:bold;}h2{font-size:150%;}h3{font-size:140%;border-bottom:none;}h4{font-size:120%;border-bottom:none;}h5{font-size:100%;border-bottom:none;}img.media{margin:3px;}img.medialeft{border:0;float:left;margin:0 1.5em 0 0;}img.mediaright{border:0;float:right;margin:0 0 0 1.5em;}ul{line-height:1.5em;list-style-type:square;margin:0 0 0.5em 1.5em;padding:0;}ol{line-height:1.5em;margin:0 0 0.5em 2.5em;padding:0;font-weight:normal;}ol ol{margin:0 0 0.5em 1.5em;}div.dokuwiki ol{list-style-type:decimal}div.dokuwiki ol ol{list-style-type:upper-roman}div.dokuwiki ol ol ol{list-style-type:lower-alpha}div.dokuwiki ol ol ol ol{list-style-type:lower-greek}span.li{font-weight:normal;}pre.pre{font-size:8pt;padding:0.5em;border:1px dashed #000;color:Black;overflow:visible;}pre.code{font-size:8pt;padding:0.5em;border:1px dashed #000;color:Black;overflow:visible;}code{font-size:120%;}pre.file{font-size:8pt;padding:0.5em;border:1px dotted #000;color:Black;overflow:visible;}div.footnotes{clear:both;border-top:1px solid #000;padding-left:1em;margin-top:1em;}div.fn{font-size:90%;}a.fn_top{vertical-align:super;font-size:80%;}a.fn_bot{vertical-align:super;font-size:80%;font-weight:bold;}acronym{border:0;}table.inline{font-size:80%;background-color:#fff;border-spacing:0px;border-collapse:collapse;}table.inline th{padding:3px;border:1px solid #000;border-bottom:2px solid #000;}table.inline td{padding:3px;border:1px solid #000;}.leftalign{text-align:left;}.centeralign{text-align:center;}.rightalign{text-align:right;}.toc,.footerinc,.header,.bar,.user{display:none}’ !"_@https://cgi.soic.indiana.edu/~c311/lib/exe/js.php?edit=0&write=0OJbplist00‘jkX$versionX$objectsY$archiverT$top Ü†Ø #)*0123MNOPQRSTUVWXYZ[\]^_`adeU$null›	
 !"R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1Ä	ÄÄÄ ÄÄÄÄ”$%'(WNS.base[NS.relativeÄ ÄÄ_@https://cgi.soic.indiana.edu/~c311/lib/exe/js.php?edit=0&write=0“+,-.Z$classnameX$classesUNSURL¢-/XNSObject#Aº-ªê¯5Y »”456ALWNS.keysZNS.objects™789:;<=>?@Ä	Ä
ÄÄÄÄÄÄÄÄ™BCDEFGHIJKÄÄÄÄÄÄÄÄÄÄÄ_Transfer-EncodingZConnectionVPragma]Last-Modified\Content-TypeVServerTDateZKeep-Alive]Cache-ControlTEtagXIdentityZKeep-AliveVpublic_Mon, 07 Jan 2013 17:24:26 GMT_text/javascript; charset=utf-8_…Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.1e-fips mod_auth_kerb/5.4 mod_fcgid/2.3.9 SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.9dev Perl/v5.16.3_Fri, 25 Dec 2015 17:58:43 GMT_timeout=5, max=100_public, max-age=3600_""ef6f1827233f26a6a85eabf0a4a92db5"“+,bc\NSDictionary¢b/_text/javascript“+,fg_NSHTTPURLResponse£hi/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—lm_WebResourceResponseÄ    # - 2 7 Z ` { ~ Ç Ö à ã è í ô ú ü ¢ • ® ™ ¨ Æ ∞ ≤ ≥ µ ∑ π ª Ω ø ¡ » – ‹ ﬁ ‡ ‚%*5>DGPY[]dlwÇÑÜàäåéêíîñ°£•ß©´≠Ø±≥µ∑À÷›Î¯ˇ"+6=]~Jjñª¿Õ–‚Á˚ˇ!36L             n              NOWØvar DOKU_BASE='/~c311/';var DOKU_TPL='/~c311/lib/tpl/doogiestpl/';var alertText='Please enter the text you want to format.\nIt will be appended to the end of the document.';var notSavedYet='Unsaved changes will be lost.\nReally continue?';var reallyDel='Really delete selected item(s)?';LANG={"keepopen":"Keep window open on selection","hidedetails":"Hide Details","nosmblinks":"Linking to Windows shares only works in Microsoft Internet Explorer.\nYou still can copy and paste the link.","mu_btn":"Upload multiple files at once","plugins":[]};function isUndefined(prop){return(typeof prop=='undefined');}function isFunction(prop){return(typeof prop=='function');}function isString(prop){return(typeof prop=='string');}function isNumber(prop){return(typeof prop=='number');}function isNumeric(prop){return isNumber(prop)&&!isNaN(prop)&&isFinite(prop);}function isArray(prop){return(prop instanceof Array);}function isRegExp(prop){return(prop instanceof RegExp);}function isBoolean(prop){return('boolean'==typeof prop);}function isScalar(prop){return isNumeric(prop)||isString(prop);}function isEmpty(prop){if(isBoolean(prop))return false;if(isRegExp(prop)&&new RegExp("").toString()==prop.toString())return true;if(isString(prop)||isNumber(prop))return!prop;if(Boolean(prop)&&false!=prop){for(var i in prop)if(prop.hasOwnProperty(i))return false}return true;}if('undefined'==typeof Object.hasOwnProperty){Object.prototype.hasOwnProperty=function(prop){return!('undefined'==typeof this[prop]||this.constructor&&this.constructor.prototype[prop]&&this[prop]===this.constructor.prototype[prop]);}}function hasFlash(version){var ver=0;try{if(navigator.plugins!=null&&navigator.plugins.length>0){ver=navigator.plugins["Shockwave Flash"].description.split(' ')[2].split('.')[0];}else{var axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");ver=axo.GetVariable("$version").split(' ')[1].split(',')[0];}}catch(e){}if(ver>=version)return true;return false;}function addEvent(element,type,handler){if(!handler.$$guid)handler.$$guid=addEvent.guid++;if(!element.events)element.events={};var handlers=element.events[type];if(!handlers){handlers=element.events[type]={};if(element["on"+type]){handlers[0]=element["on"+type];}}handlers[handler.$$guid]=handler;element["on"+type]=handleEvent;};addEvent.guid=1;function removeEvent(element,type,handler){if(element.events&&element.events[type]){delete element.events[type][handler.$$guid];}};function handleEvent(event){var returnValue=true;event=event||fixEvent(window.event);var handlers=this.events[event.type];for(var i in handlers){if(!handlers.hasOwnProperty(i))continue;this.$$handleEvent=handlers[i];if(this.$$handleEvent(event)===false){returnValue=false;}}return returnValue;};function fixEvent(event){event.preventDefault=fixEvent.preventDefault;event.stopPropagation=fixEvent.stopPropagation;event.target=event.srcElement;return event;};fixEvent.preventDefault=function(){this.returnValue=false;};fixEvent.stopPropagation=function(){this.cancelBubble=true;};window.fireoninit=function(){if(arguments.callee.done)return;arguments.callee.done=true;if(_timer){clearInterval(_timer);_timer=null;}if(typeof window.oninit=='function'){window.oninit();}};if(document.addEventListener){document.addEventListener("DOMContentLoaded",window.fireoninit,null);}/*@cc_on @*//*@if(@_win32)document.write("<scr"+"ipt id=\"__ie_init\" defer=\"true\" src=\"//:\"><\/script>");var script=document.getElementById("__ie_init");script.onreadystatechange=function(){if(this.readyState=="complete"){window.fireoninit();}};/*@end @*/if(/WebKit/i.test(navigator.userAgent)){var _timer=setInterval(function(){if(/loaded|complete/.test(document.readyState)){window.fireoninit();}},10);}window.onload=window.fireoninit;window.oninit=function(){};function addInitEvent(func){var oldoninit=window.oninit;if(typeof window.oninit!='function'){window.oninit=func;}else{window.oninit=function(){oldoninit();func();};}}DokuCookie={data:Array(),name:'DOKU_PREFS',setValue:function(key,val){DokuCookie.init();DokuCookie.data[key]=val;var now=new Date();DokuCookie.fixDate(now);now.setTime(now.getTime()+365*24*60*60*1000);var text='';for(var key in DokuCookie.data){if(!DokuCookie.data.hasOwnProperty(key))continue;text+='#'+escape(key)+'#'+DokuCookie.data[key];}DokuCookie.setCookie(DokuCookie.name,text.substr(1),now,DOKU_BASE);},getValue:function(key){DokuCookie.init();return DokuCookie.data[key];},init:function(){if(DokuCookie.data.length)return;var text=DokuCookie.getCookie(DokuCookie.name);if(text){var parts=text.split('#');for(var i=0;i<parts.length;i+=2){DokuCookie.data[unescape(parts[i])]=unescape(parts[i+1]);}}},setCookie:function(name,value,expires,path,domain,secure){var curCookie=name+"="+escape(value)+((expires)?"; expires="+expires.toGMTString():"")+((path)?"; path="+path:"")+((domain)?"; domain="+domain:"")+((secure)?"; secure":"");document.cookie=curCookie;},getCookie:function(name){var dc=document.cookie;var prefix=name+"=";var begin=dc.indexOf("; "+prefix);if(begin==-1){begin=dc.indexOf(prefix);if(begin!==0){return null;}}else{begin+=2;}var end=document.cookie.indexOf(";",begin);if(end==-1){end=dc.length;}return unescape(dc.substring(begin+prefix.length,end));},fixDate:function(date){var base=new Date(0);var skew=base.getTime();if(skew>0){date.setTime(date.getTime()-skew);}}};var clientPC=navigator.userAgent.toLowerCase();var is_macos=navigator.appVersion.indexOf('Mac')!=-1;var is_gecko=((clientPC.indexOf('gecko')!=-1)&&(clientPC.indexOf('spoofer')==-1)&&(clientPC.indexOf('khtml')==-1)&&(clientPC.indexOf('netscape/7.0')==-1));var is_safari=((clientPC.indexOf('AppleWebKit')!=-1)&&(clientPC.indexOf('spoofer')==-1));var is_khtml=(navigator.vendor=='KDE'||(document.childNodes&&!document.all&&!navigator.taintEnabled));if(clientPC.indexOf('opera')!=-1){var is_opera=true;var is_opera_preseven=(window.opera&&!document.childNodes);var is_opera_seven=(window.opera&&document.childNodes);}var toolbar='';function $(){var elements=new Array();for(var i=0;i<arguments.length;i++){var element=arguments[i];if(typeof element=='string')element=document.getElementById(element);if(arguments.length==1)return element;elements.push(element);}return elements;}function isset(varname){return(typeof(window[varname])!='undefined');}function getElementsByClass(searchClass,node,tag){var classElements=new Array();if(node==null)node=document;if(tag==null)tag='*';var els=node.getElementsByTagName(tag);var elsLen=els.length;var pattern=new RegExp("(^|\\s)"+searchClass+"(\\s|$)");for(i=0,j=0;i<elsLen;i++){if(pattern.test(els[i].className)){classElements[j]=els[i];j++;}}return classElements;}function findPosX(object){var curleft=0;var obj=$(object);if(obj.offsetParent){while(obj.offsetParent){curleft+=obj.offsetLeft;obj=obj.offsetParent;}}else if(obj.x){curleft+=obj.x;}return curleft;}function findPosY(object){var curtop=0;var obj=$(object);if(obj.offsetParent){while(obj.offsetParent){curtop+=obj.offsetTop;obj=obj.offsetParent;}}else if(obj.y){curtop+=obj.y;}return curtop;}function jsEscape(text){var re=new RegExp("\\\\","g");text=text.replace(re,"\\\\");re=new RegExp("'","g");text=text.replace(re,"\\'");re=new RegExp('"',"g");text=text.replace(re,'&quot;');re=new RegExp("\\\\\\\\n","g");text=text.replace(re,"\\n");return text;}function escapeQuotes(text){var re=new RegExp("'","g");text=text.replace(re,"\\'");re=new RegExp('"',"g");text=text.replace(re,'&quot;');re=new RegExp("\\n","g");text=text.replace(re,"\\n");return text;}function prependChild(parent,element){if(!parent.firstChild){parent.appendChild(element);}else{parent.insertBefore(element,parent.firstChild);}}function showLoadBar(){document.write('<img src="'+DOKU_BASE+'lib/images/loading.gif" '+'width="150" height="12" alt="..." />');}function hideLoadBar(id){obj=$(id);if(obj)obj.style.display="none";}function addTocToggle(){if(!document.getElementById)return;var header=$('toc__header');if(!header)return;var obj=document.createElement('span');obj.id='toc__toggle';obj.innerHTML='<span>&minus;</span>';obj.className='toc_close';obj.style.cursor='pointer';prependChild(header,obj);obj.parentNode.onclick=toggleToc;try{obj.parentNode.style.cursor='pointer';obj.parentNode.style.cursor='hand';}catch(e){}}function toggleToc(){var toc=$('toc__inside');var obj=$('toc__toggle');if(toc.style.display=='none'){toc.style.display='';obj.innerHTML='<span>&minus;</span>';obj.className='toc_close';}else{toc.style.display='none';obj.innerHTML='<span>+</span>';obj.className='toc_open';}}function checkAclLevel(){if(document.getElementById){var scope=$('acl_scope').value;if((scope.indexOf(":*")>0)||(scope=="*")){document.getElementsByName('acl_checkbox[4]')[0].disabled=false;document.getElementsByName('acl_checkbox[8]')[0].disabled=false;}else{document.getElementsByName('acl_checkbox[4]')[0].checked=false;document.getElementsByName('acl_checkbox[8]')[0].checked=false;document.getElementsByName('acl_checkbox[4]')[0].disabled=true;document.getElementsByName('acl_checkbox[8]')[0].disabled=true;}}}function footnote(e){var obj=e.target;var id=obj.id.substr(5);var fndiv=$('insitu__fn');if(!fndiv){fndiv=document.createElement('div');fndiv.id='insitu__fn';fndiv.className='insitu-footnote JSpopup dokuwiki';addEvent(fndiv,'mouseout',function(e){if(e.target!=fndiv){e.stopPropagation();return;}if(e.pageX){var bx1=findPosX(fndiv);var bx2=bx1+fndiv.offsetWidth;var by1=findPosY(fndiv);var by2=by1+fndiv.offsetHeight;var x=e.pageX;var y=e.pageY;if(x>bx1&&x<bx2&&y>by1&&y<by2){e.stopPropagation();return;}}else{if(e.offsetX>0&&e.offsetX<fndiv.offsetWidth-1&&e.offsetY>0&&e.offsetY<fndiv.offsetHeight-1){e.stopPropagation();return;}}fndiv.style.display='none';});document.body.appendChild(fndiv);}var a=$("fn__"+id);if(!a){return;}var content=new String(a.parentNode.parentNode.innerHTML);content=content.replace(/<sup>.*<\/sup>/gi,'');content=content.replace(/^\s+(,\s+)+/,'');content=content.replace(/\bid=\"(.*?)\"/gi,'id="insitu__$1');fndiv.innerHTML=content;var x;var y;if(e.pageX){x=e.pageX;y=e.pageY;}else{x=e.offsetX;y=e.offsetY;}fndiv.style.position='absolute';fndiv.style.left=(x+2)+'px';fndiv.style.top=(y+2)+'px';fndiv.style.display='';}addInitEvent(function(){var elems=getElementsByClass('fn_top',null,'a');for(var i=0;i<elems.length;i++){addEvent(elems[i],'mouseover',function(e){footnote(e);});}});function initSizeCtl(ctlid,edid){if(!document.getElementById){return;}var ctl=$(ctlid);var textarea=$(edid);if(!ctl||!textarea)return;var hgt=DokuCookie.getValue('sizeCtl');if(hgt){textarea.style.height=hgt;}else{textarea.style.height='300px';}var wrp=DokuCookie.getValue('wrapCtl');if(wrp){setWrap(textarea,wrp);}var l=document.createElement('img');var s=document.createElement('img');var w=document.createElement('img');l.src=DOKU_BASE+'lib/images/larger.gif';s.src=DOKU_BASE+'lib/images/smaller.gif';w.src=DOKU_BASE+'lib/images/wrap.gif';addEvent(l,'click',function(){sizeCtl(edid,100);});addEvent(s,'click',function(){sizeCtl(edid,-100);});addEvent(w,'click',function(){toggleWrap(edid);});ctl.appendChild(l);ctl.appendChild(s);ctl.appendChild(w);}function sizeCtl(edid,val){var textarea=$(edid);var height=parseInt(textarea.style.height.substr(0,textarea.style.height.length-2));height+=val;textarea.style.height=height+'px';DokuCookie.setValue('sizeCtl',textarea.style.height);}function toggleWrap(edid){var textarea=$(edid);var wrap=textarea.getAttribute('wrap');if(wrap&&wrap.toLowerCase()=='off'){setWrap(textarea,'soft');}else{setWrap(textarea,'off');}DokuCookie.setValue('wrapCtl',textarea.getAttribute('wrap'));}function setWrap(textarea,wrapAttrValue){textarea.setAttribute('wrap',wrapAttrValue);var parNod=textarea.parentNode;var nxtSib=textarea.nextSibling;parNod.removeChild(textarea);parNod.insertBefore(textarea,nxtSib);}function closePopups(){if(!document.getElementById){return;}var divs=document.getElementsByTagName('div');for(var i=0;i<divs.length;i++){if(divs[i].className.indexOf('JSpopup')!=-1){divs[i].style.display='none';}}}function scrollToMarker(){var obj=$('scroll__here');if(obj)obj.scrollIntoView();}function focusMarker(){var obj=$('focus__this');if(obj)obj.focus();}function cleanMsgArea(){var elems=getElementsByClass('(success|info|error)',document,'div');if(elems){for(var i=0;i<elems.length;i++){elems[i].style.display='none';}}}addInitEvent(function(){var revForm=$('page__revisions');if(!revForm)return;var elems=revForm.elements;var countTicks=0;for(var i=0;i<elems.length;i++){var input1=elems[i];if(input1.type=='checkbox'){addEvent(input1,'click',function(e){if(this.checked)countTicks++;else countTicks--;for(var j=0;j<elems.length;j++){var input2=elems[j];if(countTicks>=2)input2.disabled=(input2.type=='checkbox'&&!input2.checked);else input2.disabled=(input2.type!='checkbox');}});}}});addInitEvent(function(){var selector=$('action__selector');if(!selector)return;addEvent(selector,'change',function(e){this.form.submit();});$('action__selectorbtn').style.display='none';});function checkWindowsShares(){var elems=getElementsByClass('windows',document,'a');if(elems){for(var i=0;i<elems.length;i++){var share=elems[i];addEvent(share,'click',function(){if(document.all==null){alert(LANG['nosmblinks']);}});}}}addInitEvent(function(){checkWindowsShares();});function sack(file){this.AjaxFailedAlert="Your browser does not support the enhanced functionality of this website, and therefore you will have an experience that differs from the intended one.\n";this.requestFile=file;this.method="POST";this.URLString="";this.encodeURIString=true;this.execute=false;this.onLoading=function(){};this.onLoaded=function(){};this.onInteractive=function(){};this.onCompletion=function(){};this.afterCompletion=function(){};this.createAJAX=function(){try{this.xmlhttp=new ActiveXObject("Msxml2.XMLHTTP");}catch(e){try{this.xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");}catch(err){this.xmlhttp=null;}}if(!this.xmlhttp&&typeof XMLHttpRequest!="undefined"){this.xmlhttp=new XMLHttpRequest();}if(!this.xmlhttp){this.failed=true;}};this.setVar=function(name,value){if(this.URLString.length<3){this.URLString=name+"="+value;}else{this.URLString+="&"+name+"="+value;}};this.encVar=function(name,value){var varString=encodeURIComponent(name)+"="+encodeURIComponent(value);return varString;};this.encodeURLString=function(string){varArray=string.split('&');for(i=0;i<varArray.length;i++){urlVars=varArray[i].split('=');if(urlVars[0].indexOf('amp;')!=-1){urlVars[0]=urlVars[0].substring(4);}varArray[i]=this.encVar(urlVars[0],urlVars[1]);}return varArray.join('&');};this.runResponse=function(){eval(this.response);};this.runAJAX=function(urlstring){this.responseStatus=new Array(2);if(this.failed&&this.AjaxFailedAlert){alert(this.AjaxFailedAlert);}else{if(urlstring){if(this.URLString.length){this.URLString=this.URLString+"&"+urlstring;}else{this.URLString=urlstring;}}if(this.encodeURIString){var timeval=new Date().getTime();this.URLString=this.encodeURLString(this.URLString);this.setVar("rndval",timeval);}if(this.element){this.elementObj=document.getElementById(this.element);}if(this.xmlhttp){var self=this;if(this.method=="GET"){var totalurlstring=this.requestFile+"?"+this.URLString;this.xmlhttp.open(this.method,totalurlstring,true);}else{this.xmlhttp.open(this.method,this.requestFile,true);}if(this.method=="POST"){try{this.xmlhttp.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');}catch(e){}}this.xmlhttp.onreadystatechange=function(){switch(self.xmlhttp.readyState){case 1:self.onLoading();break;case 2:self.onLoaded();break;case 3:self.onInteractive();break;case 4:self.response=self.xmlhttp.responseText;self.responseXML=self.xmlhttp.responseXML;self.responseStatus[0]=self.xmlhttp.status;self.responseStatus[1]=self.xmlhttp.statusText;self.onCompletion();if(self.execute){self.runResponse();}if(self.elementObj){var elemNodeName=self.elementObj.nodeName;elemNodeName.toLowerCase();if(elemNodeName=="input"||elemNodeName=="select"||elemNodeName=="option"||elemNodeName=="textarea"){self.elementObj.value=self.response;}else{self.elementObj.innerHTML=self.response;}}self.afterCompletion();self.URLString="";break;}};this.xmlhttp.send(this.URLString);}}};this.createAJAX();}function ajax_qsearch_class(){this.sack=null;this.inObj=null;this.outObj=null;this.timer=null;}var ajax_qsearch=new ajax_qsearch_class();ajax_qsearch.sack=new sack(DOKU_BASE+'lib/exe/ajax.php');ajax_qsearch.sack.AjaxFailedAlert='';ajax_qsearch.sack.encodeURIString=false;ajax_qsearch.init=function(inID,outID){ajax_qsearch.inObj=document.getElementById(inID);ajax_qsearch.outObj=document.getElementById(outID);if(ajax_qsearch.inObj===null){return;}if(ajax_qsearch.outObj===null){return;}addEvent(ajax_qsearch.inObj,'keyup',ajax_qsearch.call);addEvent(ajax_qsearch.outObj,'click',function(){ajax_qsearch.outObj.style.display='none';});};ajax_qsearch.clear=function(){ajax_qsearch.outObj.style.display='none';ajax_qsearch.outObj.innerHTML='';if(ajax_qsearch.timer!==null){window.clearTimeout(ajax_qsearch.timer);ajax_qsearch.timer=null;}};ajax_qsearch.exec=function(){ajax_qsearch.clear();var value=ajax_qsearch.inObj.value;if(value===''){return;}ajax_qsearch.sack.runAJAX('call=qsearch&q='+encodeURI(value));};ajax_qsearch.sack.onCompletion=function(){var data=ajax_qsearch.sack.response;if(data===''){return;}ajax_qsearch.outObj.innerHTML=data;ajax_qsearch.outObj.style.display='block';};ajax_qsearch.call=function(){ajax_qsearch.clear();ajax_qsearch.timer=window.setTimeout("ajax_qsearch.exec()",500);};index={throbber_delay:500,treeattach:function(obj){if(!obj)return;var items=getElementsByClass('idx_dir',obj,'a');for(var i=0;i<items.length;i++){var elem=items[i];addEvent(elem,'click',function(e){return index.toggle(e,this);});var listitem=elem.parentNode;while(listitem.tagName!='LI'){listitem=listitem.parentNode;}if(listitem.getElementsByTagName('ul').length){listitem.open=true;}}},toggle:function(e,clicky){var listitem=clicky.parentNode.parentNode;listitem.open=!listitem.open;var sublists=listitem.getElementsByTagName('ul');if(!listitem.open){if(sublists.length){sublists[0].style.display='none';}listitem.className='closed';e.preventDefault();return false;}if(sublists.length&&listitem.open){sublists[0].style.display='';listitem.className='open';e.preventDefault();return false;}var ajax=new sack(DOKU_BASE+'lib/exe/ajax.php');ajax.AjaxFailedAlert='';ajax.encodeURIString=false;if(ajax.failed)return true;var ul=document.createElement('ul');ul.className='idx';timeout=window.setTimeout(function(){if(listitem.open){ul.innerHTML='<li><img src="'+DOKU_BASE+'lib/images/throbber.gif" alt="loading..." title="loading..." /></li>';listitem.appendChild(ul);listitem.className='open';}},this.throbber_delay);ajax.elementObj=ul;ajax.afterCompletion=function(){window.clearTimeout(timeout);index.treeattach(ul);if(listitem.className!='open'){if(!listitem.open){ul.style.display='none';}listitem.appendChild(ul);if(listitem.open){listitem.className='open';}}};ajax.runAJAX(clicky.search.substr(1)+'&call=index');e.preventDefault();return false;}};addInitEvent(function(){index.treeattach($('index__tree'));});addInitEvent(function(){ajax_qsearch.init('qsearch__in','qsearch__out');});addInitEvent(function(){addEvent(document,'click',closePopups);});addInitEvent(function(){addTocToggle();});acl={init:function(){this.ctl=$('acl_manager');if(!this.ctl)return;var sel=$('acl__user').getElementsByTagName('select')[0];addEvent(sel,'change',acl.userselhandler);addEvent($('acl__tree'),'click',acl.treehandler);addEvent($('acl__user').getElementsByTagName('input')[1],'click',acl.loadinfo);},userselhandler:function(e){if(this.value=='__g__'||this.value=='__u__'){$('acl__user').getElementsByTagName('input')[0].style.display='';$('acl__user').getElementsByTagName('input')[1].style.display='';}else{$('acl__user').getElementsByTagName('input')[0].style.display='none';$('acl__user').getElementsByTagName('input')[1].style.display='none';}acl.loadinfo();},loadinfo:function(){var frm=$('acl__detail').getElementsByTagName('form')[0];var ajax=new sack(DOKU_BASE+'lib/plugins/acl/ajax.php');ajax.AjaxFailedAlert='';ajax.encodeURIString=false;if(ajax.failed)return true;var data=Array();data[0]=ajax.encVar('ns',frm.elements['ns'].value);data[1]=ajax.encVar('id',frm.elements['id'].value);data[2]=ajax.encVar('acl_t',frm.elements['acl_t'].value);data[3]=ajax.encVar('acl_w',frm.elements['acl_w'].value);data[4]=ajax.encVar('ajax','info');ajax.elementObj=$('acl__info');ajax.runAJAX(data.join('&'));return false;},parseatt:function(str){if(str[0]=='?')str=str.substr(1);var attributes={};var all=str.split('&');for(var i=0;i<all.length;i++){var att=all[i].split('=');attributes[att[0]]=decodeURIComponent(att[1]);}return attributes;},hsc:function(str){str=str.replace(/&/g,"&amp;");str=str.replace(/\"/g,"&quot;");str=str.replace(/\'/g,"&#039;");str=str.replace(/</g,"&lt;");str=str.replace(/>/g,"&gt;");return str;},treetoggle:function(clicky){var listitem=clicky.parentNode.parentNode;var sublists=listitem.getElementsByTagName('ul');if(sublists.length){listitem.removeChild(sublists[0]);clicky.src=DOKU_BASE+'lib/images/plus.gif';clicky.alt='+';return false;}var link=listitem.getElementsByTagName('a')[0];var ajax=new sack(DOKU_BASE+'lib/plugins/acl/ajax.php');ajax.AjaxFailedAlert='';ajax.encodeURIString=false;if(ajax.failed)return true;var ul=document.createElement('ul');listitem.appendChild(ul);ajax.elementObj=ul;ajax.runAJAX(link.search.substr(1)+'&ajax=tree');clicky.src=DOKU_BASE+'lib/images/minus.gif';return false;},treehandler:function(e){if(e.target.src){acl.treetoggle(e.target);}else if(e.target.href){var obj=getElementsByClass('cur',$('acl__tree'),'a');for(var i=0;i<obj.length;i++){obj[i].className=obj[i].className.replace(/ cur/,'');}e.target.className+=' cur';var frm=$('acl__detail').getElementsByTagName('form')[0];if(e.target.className.search(/wikilink1/)>-1){frm.elements['ns'].value='';frm.elements['id'].value=acl.hsc(acl.parseatt(e.target.search)['id']);}else if(e.target.className.search(/idx_dir/)>-1){frm.elements['ns'].value=acl.hsc(acl.parseatt(e.target.search)['ns']);frm.elements['id'].value='';}acl.loadinfo();}e.stopPropagation();e.preventDefault();return false;}};addInitEvent(acl.init);function usrmgr_delconfirm(){if($('usrmgr__del')){addEvent($('usrmgr__del'),'click',function(){return confirm(reallyDel);});}};addInitEvent(usrmgr_delconfirm);addInitEvent(function(){scrollToMarker();});addInitEvent(function(){focusMarker();});
_text/javascript‘$%&'_Qhttps://cgi.soic.indiana.edu/~c311/lib/exe/indexer.php?id=assignment-4&1451066355Ojbplist00‘efX$versionX$objectsY$archiverT$top Ü†Ø#)*0123KLMNOPQRSTUVWXYZ[\]`U$null›	
 !"R$6S$10R$2R$7R$3S$11R$8V$classR$4R$9R$0R$5R$1Ä	ÄÄÄ ÄÄÄÄ”$%'(WNS.base[NS.relativeÄ ÄÄ_Qhttps://cgi.soic.indiana.edu/~c311/lib/exe/indexer.php?id=assignment-4&1451066355“+,-.Z$classnameX$classesUNSURL¢-/XNSObject#Aº-ªê¯G‘ »”456@JWNS.keysZNS.objects©789:;<=>?Ä	Ä
ÄÄÄÄÄÄÄ©ACDEFGHIÄÄÄÄÄÄÄÄÄÄVPragma\Content-TypeZSet-CookieVServer]Cache-ControlTDate^Content-LengthWExpiresZConnectionXno-cacheYimage/gif_qDW458e74b55f93875264846c31aad29080=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/~c311/; secure; httponly_…Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.1e-fips mod_auth_kerb/5.4 mod_fcgid/2.3.9 SVN/1.7.14 mod_wsgi/3.4 Python/2.7.5 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.9dev Perl/v5.16.3_>no-store, no-cache, must-revalidate, post-check=0, pre-check=0_Fri, 25 Dec 2015 17:59:16 GMTR42_Thu, 19 Nov 1981 08:52:00 GMTUClose“+,^_\NSDictionary¢^/“+,ab_NSHTTPURLResponse£cd/_NSHTTPURLResponse]NSURLResponse_NSKeyedArchiver—gh_WebResourceResponseÄ    # - 2 7 W ] x {  Ç Ö à å è ñ ô ú ü ¢ • ß © ´ ≠ Ø ∞ ≤ ¥ ∂ ∏ ∫ º æ ≈ Õ Ÿ € › ﬂ38CLRU^gikrzÖèëìïóôõùü°´≠Ø±≥µ∑πªΩø∆”ﬁÂÛ¯#-°mÆŒ—Ò˜¸	%)=K]`v             i              xO*GIF89a  Ä     ˇˇˇ!˘   ,       L ;Yimage/gif            1   <   Z   q   Ä   í   ®   Æ   Ø   Ì  ªè  ªô  ªü  ª™  ª¿  ª∆  º  ¡Q  Œ⁄  Œ„  ŒÓ  œ0  ‘m ?™ ?µ ?ˇ ED \œ \⁄ ] bk ∫ ∫0 ∫9 ∫ç ø˚ ¿(             (             ¿2